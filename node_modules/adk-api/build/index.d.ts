// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   bd-datamodel/gdm/module/Core

import { MessageEnvelope } from 'bd-datamodel/gdm/module/Core';

export interface ApiResponseWrapper {
    messageEnvelope?: any;
    apiWrapperEnvelope?: ApiWrapperEnvelope;
}
export interface ApiWrapperEnvelope {
    isResponseTampered?: boolean;
}
export interface ApiStatus {
    code?: number;
    description?: string;
    descriptionKey?: string;
}
export enum ApiStatusCodes {
    "SUCCESS" = 0,
    "INVALID_SESSION" = 81337,
    "AUTH_FAILED_LOGINID_NOMATCHFOUND" = 81341,
    "AUTH_ACCESS_BARRED_MAXATTEMPTS_1FA" = 81174,
    "AUTH_VLDTN_ADDTNL_OTP_REQRD_TO_CMPLTE_TRNSCTN" = 84270,
    "INCORRECT_VERIFICATION_DATA_MAX_ATTEMPTS_DONE" = 87098,
    "DVCM_CORPORATE_USER_CHANNEL_UNAVAILABLE" = 74076,
    "CORE_CHNNL_NT_FOUND" = 93253,
    "BNP_ACCT_NMBR_ALRDY_USED" = 99002,
    "BNP_CUST_NT_FOUND" = 99004,
    "BNP_CUSTID_ALRDY_USED" = 99006,
    "BNP_CARD_NMBR_ALRDY_USED" = 99008
}

export interface Account {
    accountNumber?: AccountNumber;
    accountType?: string;
    statusCode?: string;
    statusCodeDescription?: string;
    availableBalance?: string;
    currencyCode?: string;
    customerFullName?: string;
    customerMobileNumber?: string;
}
export interface AccountNumber {
    accountNumber?: string;
    maskedNumber?: string;
    isHashed?: boolean;
    hashedValue?: string;
}
export interface AccountType {
    Code?: AccountTypeEnum;
    Description?: string;
    displayValue?: string;
}
export enum AccountTypeEnum {
    DEMAND_DEPOSIT = "DEMANDDEPOSITACCOUNT",
    SAVINGS_DEPOSIT = "SAVINGSDEPOSITACCOUNT",
    CREDIT_CARD = "CREDITCARDACCOUNT",
    TERM_DEPOSIT = "TERMDEPOSIT",
    RECURRING_DEPOSIT = "RECURRINGDEPOSIT",
    INVESTMENT = "INVESTMENTACCOUNT",
    LOAN = "LOANACCT"
}
export interface MutualFundAccount {
    investmentAccountNumber?: AccountNumber;
    status?: string;
    accountAlias?: string;
    productName?: string;
    NAV?: string;
    NAVDate?: string;
    CIFNumber?: string;
    settlementAccountNumber?: AccountNumber;
    settlementAccountType?: string;
    units?: string;
    objectID?: string;
}
export interface MutualFundAccountDetail {
    objectID?: string;
    estimatedAmount?: string;
    currencyCode?: string;
    currencySymbol?: string;
}
export interface PensionFundAccount {
    accountNumber?: AccountNumber;
    status?: string;
    accountAlias?: string;
    productCategory?: string;
    pensionDate?: string;
    CIFNumber?: string;
    interest?: string;
    objectID?: string;
    investmentPackage?: string;
    accountType?: string;
}
export interface PensionFundAccountDetail {
    effectiveBalance?: string;
    individualContribution?: string;
    employerContribution?: string;
    currencyCode?: string;
    currencySymbol?: string;
    objectID?: string;
    employerBalance?: string;
    individualBalance?: string;
}
export enum TITLE_TEXTS {
    EMP_CONTRIBUTION = "Employer Contribution",
    IND_CONTRIBUTION = "Individual Contribution"
}
export interface ReferenceData {
    identifier?: string;
    Code?: string;
}
export interface PensionTransaction {
    transactionDate?: string;
    transactionTime?: string;
    description?: string;
    endingBalance?: string;
    accountNumber?: string;
    transactionType?: string;
    totalAmount?: string;
}
export interface SBNRetailAccount {
    investmentAccountNumber?: AccountNumber;
    fundingAccountNumber?: AccountNumber;
    status?: string;
    maturityDate?: string;
    accountAlias?: string;
    couponRate?: string;
    nextCouponDate?: string;
    CIFNumber?: string;
    couponValue?: string;
    objectID?: string;
    firstCouponValue?: string;
    product?: string;
    branchCode?: string;
    activeBalance?: string;
    currencyCode?: string;
    bookingCode?: string;
    couponPayDate?: string;
    nominalValue?: string;
    settlementDate?: string;
    remainingOwnership?: string;
    remainingRedeemQuota?: string;
    couponAmount?: string;
}
export interface SBNRetailAccountDetail {
    investmentAmount?: string;
    marketPrice?: string;
    currencyCode?: string;
    currencySymbol?: string;
    objectID?: string;
}
export interface ProductType {
    title?: string;
    type?: string;
    productId?: string;
    minimumBalanceAmount?: string;
    maximumBalanceAmount?: string;
}
export enum SBN_RETAIL_TITLE_TEXTS {
    COUPON_RATE = "Coupon Rate",
    NEXT_COUPEN_DATE = "Next Coupon Date",
    MATURITY_DATE = "Maturity Date",
    COUPEN_VALUE = "Coupon Value",
    FIRST_COUPEN_VALUE = "First Coupon Value"
}
export interface InvestmentAccountDetails {
    customerName?: string;
    investmentAccountNumber?: AccountNumber;
    fundingAccount?: AccountNumber;
    fundingAccountType?: string;
    customerNumber?: string;
}
export interface MFTopUpAccountDetail {
    amount?: string;
    currencyCode?: string;
    currencySymbol?: string;
}
export interface DebitCardType {
    accountId: AccountNumber;
    type: string;
    status: string;
    cardNumber: CardNumber;
    cardHolderName: string;
    transactionPayload: any;
}
export interface AddCreditCardDetails {
    customerNumber?: string;
    mobileNumber?: string;
    email?: string;
    identificationNumber?: string;
    dateOfBirth?: any;
    cardNumber?: CardNumber;
    expiryDate?: any;
    cardNumberHashed?: string;
    name?: string;
}
export enum SBNRitelAccountType {
    FUNDING_ACCOUNT = "Funding Account",
    INVESTMENT_ACCOUNT = "Investment Account",
    FUNDING_ACCOUNT_LIST = "Funding Account List",
    INVESTMENT_ACCOUNT_LIST = "Investment Account List"
}
export interface RecurringDepositAccount {
    accountNumber?: AccountNumber;
    alias?: string;
    effectiveBalance?: string;
    dueDate?: Date;
    currencyCode?: Currency;
    accountType?: string;
    productName?: string;
}
export interface RecurringDepositAccountDetail {
    cifNumber?: string;
    additionalPremium?: string;
    topUpAmount?: string;
    openingDate?: Date;
    timePeriod?: Period;
    rate?: string;
}
export interface InvestorProfileDetails {
    sid?: string;
    investorName?: string;
    ktpNumber?: string;
    birthPlace?: string;
    birthDate?: Date;
    gender?: string;
    occupation?: string;
    address?: Address;
    mobileNumber?: any;
    email?: any;
}
export interface SavingsListDetails {
    unclearedBalance?: number;
    currentBalance?: number;
    currencyCode?: string;
    currencySymbol?: string;
    effectiveBalance?: number;
    interest?: string;
    CIFNumber?: string;
}
export enum LoanTypesEnum {
    CONSUMER_LOAN = "CONSUMERLOAN",
    BUSINESS_LOAN = "BUSINESSLOAN"
}
export enum ProductRenewalOption {
    NO_RENEWAL_ALLOWED = "NORENEWALALLOWED",
    AUTOMATIC_RENEWAL = "AUTOMATICRENEWAL"
}
export const enum AccountPeriodEnum {
    LTD = "Life To Date",
    CTD = "Cycle to Date"
}
export const enum AccountAmountEnum {
    CLOSING_LEDGER_BALANCE = "Closing Ledger Balance",
    OPENING_LEDGER_BALANCE = "Opening Ledger Balance"
}
export const pfmNonRegisteredErrorCodes: ApiStatusCodes[];

export enum CurrencyCode {
    'IDR' = "IDR",
    'USD' = "USD"
}
export enum FundTransferProcessingMethod {
    ELECTRONIC = "ELECTRONIC",
    RTGS = "RTGS",
    BISKN = "BISKN",
    SWIFT = "SWIFT",
    INTERNAL = "INTERNAL",
    DPLK = "DPLK",
    EXTERNAL = "EFT"
}
export const enum FundTransferType {
    ACCOUNTPAYEETRANSFER = "ACCOUNTPAYEETRANSFER",
    ACCOUNTTRANSFER = "ACCOUNTTRANSFER"
}

export interface RechargePaymentPredefinedBenficiaryImmediateWallet {
    serviceType?: string;
    currencyCode?: CurrencyCode;
    currencySymbol?: string;
    customerName?: string;
    customerNumber?: string;
    adminFee?: string;
    facilityProvider?: string;
    topUpAmount?: string;
    feeIdentifier?: string;
    journalNumber?: string;
    transactionDate?: Date;
    referenceData?: any;
    data?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    digitalTxnId?: string;
    fromAccountNumber?: AccountNumber;
    payeeNickName?: string;
    payeeId?: string;
}
export interface Date {
    day?: number;
    hour?: number;
    minute?: number;
    month?: number;
    second?: number;
    version?: string;
    year?: number;
}
export enum InsuranceTypes {
    BPU = "BPJS_BPU",
    EPS = "BPJS_KETENAGAKERJAAN",
    TKI = "BPJS_TKI",
    BPJS_KESEHATAN_VA = "BPJS_KESEHATAN_VA",
    VA_PAYMENT = "VAPAYMENT"
}
export enum AmountTypes {
    JHT = "Amount JHT",
    JKK = "Amount JKK",
    JKM = "Amount JKM",
    JPK = "Amount JPK",
    JPN = "Amount JPN",
    BPJSK = "Total Amount BPJSK",
    BPJSTK = "Total Amount BPJSTK",
    TOTAL = "Total Amount"
}
export enum WalletTypes {
    GOPAY = "GOPAY",
    LINKAJA = "LINKAJATCASH",
    TAPCASH = "BNI-TAPCASH",
    OVO = "OVO",
    DANA = "Dana",
    MPN_G2_DJA = "MPN_G2_DJA",
    VA_PAYMENT = "VAPAYMENT"
}
export enum FeeTypes {
    TRANSACTION = "TRANSACTION",
    BILLPAYMENTPROCESSINGFEE = "BILLPAYMENTPROCESSINGFEE",
    CREDITLIMITFEE = "CREDITLIMITFEE"
}
export enum FeeDescriptions {
    TRANSACTION_FEE = "trxFeeBPJSTK",
    REGISTRATION_FEE = "regFeeBPJSTK",
    ADMIN_FEE = "Admin Fee",
    SERVICE_FEE = "Service Fee"
}
export enum TradeType {
    BUY = "Buy",
    REDEEM = "Redeem"
}
export enum OrderType {
    MARKETORDER = "MARKETORDER"
}
export enum CreditCardAmountTypes {
    LASTBILL = "Last Bill Amount"
}
export enum SummaryAmountListTypes {
    DEPOSITAMOUNT = "Deposit Amount"
}
export enum MfAssetProperties {
    NAV = "NAV",
    NAV_DATE = "NAV Date",
    MIN_TOP_UP = "Minimum Top Up",
    MAX_TOP_UP = "Maximum Top Up",
    MIN_REDEEM_UNIT = "Minimum Redeem Unit",
    MAX_REDEEM_UNIT = "Maximum Redeem Unit"
}
export enum TeleCommunicationTypes {
    INDOSAT_POSTPAID = "INDOSAT_POSTPAID",
    SPEEDY = "SPEEDY",
    TSELDATA = "TSELDATA"
}
export enum ElectricityPaymentTypes {
    ELECTRICITY_PLN_PREPAID = "PLNPAYMENT",
    ELECTRICITY_PLN_POSTPAID = "PLN_POSTPAID"
}
export enum CreditCardTypes {
    CC_BNI = "CC_BNI"
}
export enum BillerName {
    BPJS_KESEHATAN_VA = "BPJSKesehatan",
    BPJS_KETENAGAKERJAAN = "BPJSKetenagakerjaan",
    ELECTRICITY_PLN = "PLN",
    LINKAJA = "LINKAJA",
    GOPAY = "GOPAY",
    TAPCASH = "TapCash",
    INTERNET = "Internet",
    CREDIT_CARD = "CreditCard",
    PACKET_DATA = "PacketData",
    OVO = "OVO",
    DANA = "DANA",
    VA_PAYMENT = "VAPAYMENT",
    PULSA = "Pulsa"
}
export enum RevenueTypes {
    DJA = "MPN_G2_DJA",
    DJBC = "MPN_G2_DJBC"
}
export interface BankDetail {
    bankName?: string;
    bankCode?: string;
    bankAddress?: Address;
    rtgsCode?: string;
    clearingCode?: string;
    swiftCode?: string;
    ibanFlag?: IBANFlag;
}
export const enum IBANFlag {
    AVAILABLE = "Y",
    NOT_AVAILABLE = "N"
}
export enum ElectricityPrepaidCustomerNumberType {
    METER_NUMBER = "MeterNumber",
    IDPEL = "IDPEL"
}
export const enum WalletBIlledAmountLimitLabels {
    MINIMUM_PAYMENT = "Minimum Bayar",
    MAXIMUM_LIMIT = "Batas Maksimum"
}

export interface CustomerDetail extends NameList {
    gender?: string;
    birthDate?: GDMDate;
    birthPlace?: string;
    maritalStatus?: string;
    contactNumbers?: {
        fax?: string;
        home?: string;
        work?: string;
        mobile?: string;
    };
    postalContact?: {
        home?: Address;
        business?: Address;
        primary?: Address;
        seasonal?: Address;
        secondary?: Address;
    };
    email?: {
        business: string;
        person: string;
        other: string;
    };
}
export interface Address {
    line1?: string;
    line2?: string;
    line3?: string;
    line4?: string;
    postalCode?: string;
    country?: Country;
    city?: string;
    province?: string;
}
export interface Country {
    countryName: string;
    code: string;
    countryCode: string;
}
export interface GDMDate {
    day?: number;
    month?: number;
    year?: number;
}
export interface NameList {
    fullName?: string;
    firstName?: string;
    lastName?: string;
    middleName?: string;
}
export enum PayloadCategoryEnum {
    CONTACT_LIST = "ContactList",
    CUSTOMER_PROFILE_INFORMATION = "Customer Profile Information",
    INVESTMENT_ACCOUNT_LIST = "InvestmentAccountList"
}
export enum CountryCodeEnum {
    INDONESIA = "INDONESIA"
}

export interface Asset {
    seriesId?: string;
    couponRate?: string;
    couponLowerLimit?: string;
    couponUpperLimit?: string;
    initialCouponRate?: string;
    spread?: string;
    couponType?: string;
    settlementDate?: string;
    couponPayDate?: string;
    assetInquiryIdentifier?: string;
    maturityDate?: string;
    inverstorQuota?: string;
}
export enum AssetProperties {
    COUPON_RATE = "Coupon Rate",
    COUPON_LOWER_LIMIT = "Coupon Lower Limit",
    COUPON_UPPER_LIMIT = "Coupon Upper Limit",
    INITIAL_COUPON_RATE = "Initial Coupon Rate",
    SPREAD = "Spread",
    COUPON_TYPE = "Coupon Type",
    SETTLEMENT_DATE = "Settlement Date",
    COUPON_PAY_DATE = "Coupon Payment Date",
    MATURITY_DATE = "Maturity Date",
    INVESTOR_QUOTA = "Investor Quota",
    COUPON_AMOUNT = "Coupon Amount",
    COUPON_VALUE = "Coupon Value",
    FIRST_COUPON_VALUE = "First Coupon Value",
    NOMINAL_VALUE = "Value",
    REMAINING_VALUE = "Remaining Value",
    REDEEMABLE = "Redeemable"
}

export const enum AUDIO_MIME_TYPE {
    OGG = "audio/ogg",
    MP3 = "audio/mp3"
}
export const enum VIDEO_MIME_TYPE {
    OGG = "video/ogg",
    MP4 = "video/mp4",
    WEBM = "video/webm"
}
export const enum IMAGE_MIME_TYPE {
    JPEG = "image/jpeg",
    GIF = "image/gif",
    PNG = "image/png"
}
export const enum TEXT_MIME_TYPE {
    TEXT = "text/plain",
    CSV = "text/csv",
    JSON = "text/json"
}
export const enum FORM_MIME_TYPE {
    MULTIPART_FORMDATA = "multipart/form-data"
}
export const enum APPLICATION_MIME_TYPE {
    FLASH = "application/flash",
    PDF = "application/pdf",
    QIF = "application/qif",
    OFX_2_1_1 = "application/x-ofx;version=2.1.1",
    OFX_2_0_3 = "application/x-ofx;version=2.0.3",
    MICROSOFT_POWERPOINT = "application/vnd.ms-powerpoint",
    MICROSOFT_WORD = "application/msword",
    XML = "application/xml",
    MICROSOFT_EXCEL = "application/vnd.ms-excel",
    JWT = "application/jwt"
}
export const enum HTML_MIME_TYPE {
    HTML = "HTML"
}
export type DOCUMENT_MIME_TYPE = AUDIO_MIME_TYPE | VIDEO_MIME_TYPE | IMAGE_MIME_TYPE | TEXT_MIME_TYPE | FORM_MIME_TYPE | APPLICATION_MIME_TYPE | HTML_MIME_TYPE;
export const enum DOCUMENT_CATEGORY {
    PHOTOGRAPH = "PHOTOGRAPH",
    EMPLOYMENTDETAIL = "EMPLOYMENTDETAIL",
    LOANINFORMATION = "LOANINFORMATION",
    LOANCOLLATERAL = "LOANCOLLATERAL",
    INCOMEFROMEMPLOYMENT = "INCOMEFROMEMPLOYMENT",
    ADDRESS = "ADDRESS",
    ISSUEDIDENTIFICATION = "ISSUEDIDENTIFICATION",
    ASSET = "ASSET",
    LIABILITY = "LIABILITY",
    OTHERINCOME = "OTHERINCOME",
    OTHEREXPENSE = "OTHEREXPENSE",
    INSURANCE = "INSURANCE",
    SIGNATURE = "SIGNATURE",
    APPLICATIONFORM = "APPLICATIONFORM"
}
export const enum ReportFormatTypes {
    PDF = "PDF",
    MICROSOFT_EXCEL = "MS-EXCEL"
}
export const enum EncodingType {
    BASE64 = "BASE64",
    BASE64URL = "BASE64URL",
    HTML = "HTML",
    URL = "URL",
    UNICODE = "UNICODE",
    HEX = "HEX"
}

export const enum VERIFICATION_TYPE {
    TRADITIONALPASSWORD = "TRADITIONALPASSWORD",
    QNACHALLENGE = "QNACHALLENGE",
    OTP = "OTP",
    CAPTCHA = "CAPTCHA",
    BIOMETRICS = "BIOMETRICS",
    GOVERNMENTID = "GOVERNMENTID",
    CARDGRID = "CARDGRID",
    CUSTOMERIDENTIFIER = "CUSTOMERIDENTIFIER",
    MILITARYIDENTIFIER = "MILITARYIDENTIFIER",
    NATIONALIDENTIFIER = "NATIONALIDENTIFIER",
    PASSPORTIDENTIFIER = "PASSPORTIDENTIFIER",
    EMPLOYEEIDENTIFIER = "EMPLOYEEIDENTIFIER",
    ACCOUNTNUMBER = "ACCOUNTNUMBER",
    DOB = "DOB",
    EMAILID = "EMAILID",
    EMCERTIDENTIFIER = "EMCERTIDENTIFIER",
    EZBIOIDENTIFIER = "EZBIOIDENTIFIER",
    MOTHERSMAIDENNAME = "MOTHERSMAIDENNAME",
    PIN = "PIN",
    SMSESSION = "SMSESSION",
    TRANSAKTTOKENIDENTIFIER = "TRANSAKTTOKENIDENTIFIER",
    USSD = "USSD",
    SMARTID = "SMARTID",
    MOBILEID = "MOBILEID",
    SIGNATURE = "SIGNATURE",
    ISSUEDIDENTIFICATION = "ISSUEDIDENTIFICATION"
}
export const enum VERIFICATION_DATA_STATUS {
    ACTIVE = "ACTIVE",
    LOCKED = "LOCKED",
    INACTIVE = "INACTIVE",
    BLOCKED = "BLOCKED",
    RESET = "RESET",
    DELETED = "DELETED",
    EXPIRED = "EXPIRED"
}
export const enum AuthVerificationType {
    PASSWORD = "PASSWORD",
    HARDWARE = "HARDWARE",
    SOFTWARE = "SOFTWARE"
}
export const enum DEBIT_CARD_VALIDATION_PURPOSE {
    FORGOTMPIN = "FORGOTMPIN",
    UNBLOCKLOGIN = "UNBLOCKLOGIN"
}

export interface FavouriteTransfer {
    payeeNickName?: string;
    payeeID?: string;
    payeeFullName?: string;
    payeeAddress?: string;
    currency?: string;
    bankName?: string;
    bankCode?: string;
    destinationCountry?: string;
    residentialStatus?: string;
    branchName?: string;
    citizenShip?: string;
    branchIdentifier?: string;
    toAccountNumber?: AccountNumber;
    beneficiryType?: string;
    paymentMethod?: string;
    payeeCountryCode?: string;
    prefix?: string;
    transferMethod?: string;
    amount?: string;
    remarks?: string;
    fromAccountNumber?: string;
    coreBankFees?: string;
}
export enum TransferBeneficiaryType {
    EXTERNAL_BANK_ACC_PAYEE = "External Bank",
    WITHIN_BANK_ACC_PAYEE = "Within Bank"
}
export interface FavouriteBillPayee {
    payeeNickName?: string;
    payeeID?: string;
    billerID?: string;
    billerName?: string;
    customerReferenceNumber?: string;
    billerPrefix?: string;
    amount?: string;
    noOfMonths?: string;
}

export interface Unit {
    Code?: string;
    Description?: string;
}
export interface Period {
    count?: number;
    units?: Unit;
}
export interface Currency {
    Code?: string;
    Description?: string;
    displayValue?: string;
    symbol?: string;
}
export interface CountryCode {
    Code?: string;
    Description?: string;
    displayValue?: string;
    twoAlphaCode?: string;
}

export enum OperationTypes {
    REGISTER = "REG",
    CREATE = "CRT",
    INQUIRY = "INQ",
    VALIDATE = "VLD",
    UPDATE = "UPD",
    CONFIRM = "CNF",
    DELETE = "DEL",
    SIMULATION = "SIM"
}

export enum CustomerServiceRelationshipStatusType {
    REGISTERED = "REGISTERED",
    UNREGISTERED = "UNREGISTERED",
    NEVERREGISTERED = "NEVERREGISTERED",
    SUSPENDED = "SUSPENDED",
    DISABLED = "DISABLED",
    PENDINGAUTHORIZATION = "PENDINGAUTHORIZATION",
    AUTHORIZATIONAPPROVED = "AUTHORIZATIONAPPROVED",
    AUTHORIZATIONREJECTED = "AUTHORIZATIONREJECTED",
    CANCELLED = "CANCELLED",
    MODIFICATIONPENDINGAUTHORIZATION = "MODIFICATIONPENDINGAUTHORIZATION",
    ESTABLISHED = "ESTABLISHED",
    MANDATED = "MANDATED",
    PENDING = "PENDING"
}
export enum InvestmentAssetTypes {
    RETAIL_BONDS = "RetailBonds",
    MUTUAL_FUNDS = "MutualFunds",
    PENSION_FUNDS = "PensionFunds"
}

export const enum DEVICE_TYPE {
    CAMERA = "CAMERA",
    SCANNER = "SCANNER",
    PRINTER = "PRINTER",
    PASSBOOKPRINTER = "PASSBOOKPRINTER",
    POSTERMINAL = "POSTERMINAL",
    SMARTPHONE = "SMARTPHONE",
    RFIDREADER = "RFIDREADER",
    FINGERPRINTREADER = "FINGERPRINTREADER",
    IRISSCANNER = "IRISSCANNER",
    CASHDISPERSERMODULE = "CASHDISPERSERMODULE",
    CASHACCEPTANCEMODULE = "CASHACCEPTANCEMODULE",
    CHECKSCANNER = "CHECKSCANNER",
    DEPOSITORY = "DEPOSITORY",
    ALARM = "ALARM",
    ITEMPROCESSINGMODULE = "ITEMPROCESSINGMODULE",
    PINKEYPAD = "PINKEYPAD",
    SENSORANDINDICATOR = "SENSORANDINDICATOR",
    TEXTTERMINAL = "TEXTTERMINAL",
    TABLET = "TABLET",
    SMARTWATCH = "SMARTWATCH",
    WORKSTATION = "WORKSTATION",
    HOMECOMPUTER = "HOMECOMPUTER"
}
export const enum DEVICE_REGISTRATION_STATUS {
    REGISTERED = "REGISTERED",
    NEVERREGISTERED = "NEVERREGISTERED",
    ACTIVE = "ACTIVE"
}

export enum DownloadReportIdsAcknowledgment {
    TV_SUBSCRIPTION = "BillPayment_1.0.0_TVSubscription_Download",
    LINKAJA = "Transaction_1.0.0_Linkaja",
    INTERNATIONAL_TRANSFER = "AccountPayment_1.0.0_SWIFT_Download",
    TERM_ACCOUNT_OPENING = "TermDepositProductApplication_1.0.0_ACK",
    RECURRING_ACCOUNT_OPENING = "RecurringDepositProductApplication_1.0.0_ACK",
    PLN_POSTPAID = "PLN_Postpaid_1.0.0_Download",
    ADD_CREDIT_CARD = "Creditcard_1.0.0_Acknowledgement_Addcard",
    ADD_CREDIT_CARD_UPD = "Creditcard_1.0.0_Acknowledgement_AddcardUPD",
    DPLK_TRANSFER = "Pension_Funds_Transfer_1.0.0_Download",
    INTERNAL_ACCOUNT_PAYEE_TRANSFER = "Internal_Account_Payee_Transfer_1.0.0_Download",
    INTERNAL_ACCOUNT_TRANSFER = "Internal_Account_Transfer_1.0.0_Download",
    EXTERNAL_ACCOUNT_TRANSFER = "AccountPayment_1.0.0_ELECTRONIC_Download",
    INTERNET_PACKAGE = "BillPayment_1.0.0_Acknowledgement_InternetPackage",
    PACKET_DATA_INDOSAT = "RechargePayment_1.0.0_Acknowledgement_Indosat",
    PACKET_DATA_TSELDATA = "RechargePayment_1.0.0_Acknowledgement_Tseldata",
    PACKET_DATA_XLDATA = "RechargePayment_1.0.0_XLDATA",
    MUTUAL_FUND_REDEEM = "InvestmentOrder_1.0.0_MutualFundRedeem_Download",
    MUTUAL_FUND_TOPUP = "InvestmentOrder_1.0.0_MutualFundTopup_Download",
    VIRTUAL_ACCOUNT_BILLING = "BillPayment_1.0.0_Acknowledgement_Virtual",
    TRAIN_TICKET = "BillPayment_1.0.0_Acknowledgement_Train",
    SBN_ORDER = "Transaction_1.0.0_SBNOrder",
    SBN_PAYMENT = "Transaction_1.0.0_SBNPayment",
    SBN_REDEEM = "InvestmentOrder_1.0.0_SBNRedeem",
    RTGS = "AccountPaymenmt_1.0.0_Acknowledgement_RTGS",
    BISKN = "AccountPaymenmt_1.0.0_Acknowledgement_BISKN",
    CHANGE_TRANSACTION_PASSWORD = "",
    CHANGE_MPIN = "TransactionUserCredentials_1.0.0_ChangeMPIN",
    MPNG2_DJA = "BillPayment_1.0.0_Acknowledgement_MPNG2_DJA",
    MPNG2_DJBC = "BillPayment_1.0.0_Acknowledgement_MPNG2_DJBC",
    BPJS_HEALTH = "BillPayment_1.0.0_BpjHealth",
    BPJS_EMPLOYMENT_EPS = "BillPayment_1.0.0_Acknowledgement_tkva",
    BPJS_EMPLOYMENT_BPU = "BillPayment_1.0.0_Acknowledgement_TKBPU",
    PLN_PREPAID = "Transaction_1.0.0_PLN",
    MOBILE_PREPAID = "MobilePrepaidRecharge_1.0.0_Download",
    MOBILE_POSTPAID = "BillPayment_1.0.0_Acknowledgement_MobilePostpaid_INDOSAT",
    GOPAY = "RechargePayment_1.0.0_Acknowledgement_Gopay",
    TAPCASH = "RechargePayment_1.0.0_Acknowledgement_Tapcash",
    CREDIT_CARD = "Credit_Card_Bill_Payment_1.0.0_Download",
    DANA = "BillPayment_1.0.0_Dana",
    OVO = "BillPayment_1.0.0_Ovo",
    ACTIVATE_DEBIT_CARD = "ActivateCardInternationalUsageRequest_1.0.0_Acknowledgement",
    CHANGE_DEBIT_CARD_PIN = "ChangeDebitCardPIN_1.0.0_Download",
    BLOCK_DEBIT_CARD = "BlockDebitCard_1.0.0_Download",
    CHANGE_TRANSACTION_PWD = "ChangeTransactionPassword_1.0.0_Dowload",
    SAVINGS_ACCOUNT_OPENING = "SavingsDepositProductApplication_1.0.0_Saving",
    CURRENT_ACCOUNT_OPENING = "DemandDepositProductApplication_1.0.0_Demand",
    SETUP_LIFE_GOAL = "SetUpLifeGoal_1.0.0_Dowload",
    FORGOT_TRANSACTION_PASSWORD_SAVINGS = "TransactionUserCredentials_1.0.0_ForgotTxnPassword",
    FORGOT_TRANSACTION_PASSWORD_CREDIT_CARD = "TransactionUserCredentials_1.0.0_ForgotTxnPassword_credit",
    M_SECURE_ACTIVATION = "TransactionUserCredentials_1.0.0_Msecure"
}
export enum DownloadReportIdsAccountStatement {
    SAVINGS_TRANSACTION_LIST = "Transaction_1.0.0_CurrentAccount_list",
    INVESTMENT_ACCOUNT_STATEMENT = "Transaction_1.0.0_InvestmentAccount_list",
    CREDIT_CARD_UNBILLED_ACCOUNT_STATEMENT = "CardTransaction_1.0.0_Unbilled_list",
    TAPENAS_ACCOUNT_STATEMENT = "Transaction_1.0.0_Tapenas_Transactions",
    DEPOSIT_TRANSACTION_LIST = "Transaction_1.0.0_DepositAccount_list",
    LOAN_TRANSACTION_LIST = "Transaction_1.0.0_LoanTransaction_list",
    CREDIT_CARD_BILLED_ACCOUNT_STATEMENT = "CardTransaction_1.0.0_billed_list"
}

export enum CardTypeEnum {
    CREDIT = "CREDIT"
}
export interface CardNumber {
    cardNumber?: string;
    id?: string;
    maskedNumber?: string;
    isHashed?: boolean;
    hashedValue?: string;
}
export interface TransactionDetails {
    transactionIdentifier?: string;
    transactionDate?: Date;
    bookKeepingDate?: Date;
    description?: string;
    totalAmount?: string;
    totalAmountCurrency?: any;
}
export interface CardBilledData {
    statementDate?: Date;
    cardIdentifier?: CardNumber;
}

export interface LifeGoalAccount {
    lifeGoalId: AccountNumber;
    lifeGoalName: string;
    targetValue: string;
    targetCurrency: string;
    currentLifeGoals: string;
    debitAccount: AccountNumber;
    typesOfSavings: string;
    debitAmount: string;
    frequencyType: string;
    targetDate: Date;
    pfmRegisteredUser?: boolean;
}
export interface BudgetCategory {
    categoryId?: string;
    categoryName?: string;
    maxValue?: string;
    actualValue?: string;
    categoryIcon?: string;
    month?: number;
    year?: number;
    pfmRegisteredUser?: boolean;
}
export interface TransactionSummary {
    accountNumber?: AccountNumber;
    description: string;
    descriptionAdditional?: string;
    endingBalance: string;
    amount?: string;
    transactionDate: Date;
    transactionId: string;
    transactionType: string;
}
export interface PfmTransaction {
    effectiveDate?: string;
    accountAmountType?: AccountAmountEnum;
    accountPeriodType?: AccountPeriodEnum;
    amount?: Number;
    currencyCode?: string;
}
export interface PfmAccountTransactions {
    accountNumber?: AccountNumber;
    accountTransactions?: PfmTransaction[];
    pfmRegisteredUser?: boolean;
}
export const enum frequencyTypeMethod {
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    MONTHLY = "MONTHLY",
    YEARLY = "YEARLY",
    FORTNIGHTLY = "FORTNIGHTLY",
    QUATERLY = "QUATERLY",
    HALF_YEARLY = "HALF_YEARLY",
    BILL_ARRIVAL = "BILL_ARRIVAL",
    MATURITY = "MATURITY",
    DATE = "DATE"
}
export const enum DayOfMonthEnum {
    ONE = "1",
    TWO = "2",
    THREE = "3",
    FOUR = "4",
    FIVE = "5",
    SIX = "6",
    SEVEN = "7",
    EIGHT = "8",
    NINE = "9",
    TEN = "10",
    ELEVEN = "11",
    TWELVE = "12",
    THIRTEEN = "13",
    FOURTEEN = "14",
    FIFTEEN = "15",
    SIXTEEN = "16",
    SEVENTEEN = "17",
    EIGHTEEN = "18",
    NINETEEN = "19",
    TWENTY = "20",
    TWENTY_0NE = "21",
    TWENTY_TWO = "22",
    TWENTY_THREE = "23",
    TWENTY_FOUR = "24",
    TWENTY_FIVE = "25",
    TWENTY_SIX = "26",
    TWENTY_SEVEN = "27",
    TWENTY_EIGHT = "28",
    TWENTY_NINE = "29",
    THIRTY = "30",
    THIRTY_ONE = "31"
}

export enum ProductTypeEnum {
    SAVINGS_DEPOSIT = "SAVINGSDEPOSITPRODUCT",
    DEMAND_DEPOSIT = "DEMANDDEPOSITPRODUCT",
    TERM_DEPOSIT = "TERMDEPOSITPRODUCT",
    LOAN = "LOANPRODUCT",
    RECURRING_DEPOSIT = "RECURRINGDEPOSITPRODUCT"
}

export const enum CardAccountRelationshipStatusType {
    PENDING = "PENDING",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE",
    PENDINGDELETE = "PENDINGDELETE",
    DELETED = "DELETED"
}

export const enum ReferenceTypeEnum {
    TRANSACTION_SPECIFIC = "TRANSACTIONSPECIFIC",
    MOBILE_NUMBER = "MOBILENUMBER"
}

export const enum UserServiceRelationShipStatusType {
    REGISTERED = "REGISTERED",
    DEREGISTERED = "DEREGISTERED",
    NEVERREGISTERED = "NEVERREGISTERED",
    SUSPENDED = "SUSPENDED",
    PENDING = "PENDING",
    ACKNOWLEDGEMENTPENDING = "ACKNOWLEDGEMENTPENDING",
    TWOFAREGISTRATIONPENDING = "TWOFAREGISTRATIONPENDING",
    PENDINGLOCKED = "PENDINGLOCKED"
}

export const enum ISSUED_IDENTIFICATION_TYPE {
    STATEREVENUETRANSACTIONNUMBER = "STATEREVENUETRANSACTIONNUMBER",
    TAXIDNUMBER = "TAXIDNUMBER",
    DRIVERSLICENCENUMBER = "DRIVERSLICENCENUMBER",
    BIRTHCERTIFICATE = "BIRTHCERTIFICATE",
    HEALTHCARD = "HEALTHCARD",
    MILITARY = "MILITARY",
    PERMANENTRESIDENCE = "PERMANENTRESIDENCE",
    ALIENREGNUMBER = "ALIENREGNUMBER",
    RETIREMENT = "RETIREMENT",
    IDENTITYCARDNB = "IDENTITYCARDNB",
    VOTERREGISTRATION = "VOTERREGISTRATION",
    PASSPORTTNB = "PASSPORTTNB",
    PASSBOOK = "PASSBOOK",
    EMPLOYERIDNUMBER = "EMPLOYERIDNUMBER",
    SOCIALSECURITYNUMBER = "SOCIALSECURITYNUMBER",
    NRAPERSONAL = "NRAPERSONAL",
    NINO = "NINO",
    MERCHANTID = "MERCHANTID",
    BIC = "BIC",
    IBEI = "IBEI",
    BEI = "BEI",
    EANGLN = "EANGLN",
    USCHU = "USCHU",
    DUNS = "DUNS",
    BANKPARTYID = "BANKPARTYID",
    PROPRIETARYID = "PROPRIETARYID",
    NRABUSINESS = "NRABUSINESS",
    OTHER = "OTHER",
    NATIONALID = "NATIONALID",
    NEWIMMIGRANTCERTIFICATE = "NEWIMMIGRANTCERTIFICATE",
    DISABILITYCERTIFICATE = "DISABILITYCERTIFICATE",
    EDUCATIONCERTIFICATE = "EDUCATIONCERTIFICATE",
    EMPLOYMENTCARD = "EMPLOYMENTCARD",
    INSURANCENUMBER = "INSURANCENUMBER",
    SOCIALSECURITYCERTIFICATE = "SOCIALSECURITYCERTIFICATE",
    STUDENTCERTIFICATE = "STUDENTCERTIFICATE",
    STATEID = "STATEID",
    TRADELICENSE = "TRADELICENSE",
    CERTIFICATEOFREGISTRATIONOFPARTNERSHIPFIRM = "CERTIFICATEOFREGISTRATIONOFPARTNERSHIPFIRM",
    CERTIFICATEOFINCORPORATIONOFLIMITEDCOMPANY = "CERTIFICATEOFINCORPORATIONOFLIMITEDCOMPANY",
    CERTIFICATEOFCOMMENCEMENTOFPUBLICLIMITEDCOMPANYONLY = "CERTIFICATEOFCOMMENCEMENTOFPUBLICLIMITEDCOMPANYONLY",
    LETTEROFPERMISSIONFORGOVERNMENTACCOUNT = "LETTEROFPERMISSIONFORGOVERNMENTACCOUNT",
    CERTIFICATEOFREGISTRATION = "CERTIFICATEOFREGISTRATION",
    BUSINESSIDENTIFICATIONNUMBER = "BUSINESSIDENTIFICATIONNUMBER",
    IMPORTREGISTRATIONCERTIFICATE = "IMPORTREGISTRATIONCERTIFICATE",
    EXPORTREGISTRATIONCERTIFICATE = "EXPORTREGISTRATIONCERTIFICATE",
    VATNUMBER = "VATNUMBER",
    BEPZAPERMISSION = "BEPZAPERMISSION",
    BIDAPERMISSION = "BIDAPERMISSION",
    FDIPERMISSION = "FDIPERMISSION",
    BANKLICENSE = "BANKLICENSE",
    BANKPERMISSION = "BANKPERMISSION",
    COMMERCIALLICENSE = "COMMERCIALLICENSE",
    PROPERTYOWNERSHIPDOCUMENT = "PROPERTYOWNERSHIPDOCUMENT",
    PROPERTYRENTRECEIPT = "PROPERTYRENTRECEIPT",
    MEMBERSHIPCERTIFICATE = "MEMBERSHIPCERTIFICATE",
    CREDITCARD = "CREDITCARD",
    PARTNERSHIPDEEDUNREGISTERED = "PARTNERSHIPDEEDUNREGISTERED",
    RESOLUTION = "RESOLUTION",
    MEMORANDUMANDARTICLESOFASSOCIATION = "MEMORANDUMANDARTICLESOFASSOCIATION",
    FORMXIIFORLIMITEDCOMPANY = "FORMXIIFORLIMITEDCOMPANY",
    POWEROFATTORNEY = "POWEROFATTORNEY",
    STATUEOFFORMATIONOFGOVERNMENTOWNEDENTITY = "STATUEOFFORMATIONOFGOVERNMENTOWNEDENTITY",
    NGONPODOCUMENTS = "NGONPODOCUMENTS",
    BYLAWSNOTCERTIFIED = "BYLAWSNOTCERTIFIED",
    BYLAWSCERTIFIED = "BYLAWSCERTIFIED",
    CLEARANCEOFFOREIGNMINISTRY = "CLEARANCEOFFOREIGNMINISTRY",
    CERTIFIEDTRUECOPYOFTRUSTYDEED = "CERTIFIEDTRUECOPYOFTRUSTYDEED",
    FORMQA22A7DECLARATION = "FORMQA22A7DECLARATION",
    JOINTVENTUREAGREEMENTDEED = "JOINTVENTUREAGREEMENTDEED",
    RESOLUTIONOFEDUCATIONINSTITUTION = "RESOLUTIONOFEDUCATIONINSTITUTION",
    CERTIFICATEOFFOREIGNMISSION = "CERTIFICATEOFFOREIGNMISSION",
    NONINDIVIDUALGROUPCUSTOMER = "NONINDIVIDUALGROUPCUSTOMER",
    AADHARNUMBER = "AADHARNUMBER"
}

export enum NetworkErrorType {
    RESOURCE_PERMANENTLY_MOVED_TO_NEW_URL = "RESOURCE_PERMANENTLY_MOVED_TO_NEW_URL",
    RESOURCE_TEMPORARILY_MOVED_TO_NEW_URL = "RESOURCE_TEMPORARILY_MOVED_TO_NEW_URL",
    RESOURCE_REQUESTED_NOT_FOUND = "RESOURCE_REQUESTED_NOT_FOUND",
    ACCESS_TO_TARGET_RESOURCE_NOT_AVAILABLE = "ACCESS_TO_TARGET_RESOURCE_NOT_AVAILABLE",
    SERVER_ENCOUNTERED_UNEXPECTED_CONDITION = "SERVER_ENCOUNTERED_UNEXPECTED_CONDITION",
    SERVER_NOT_READY_TO_HANDLE_REQUEST = "SERVER_NOT_READY_TO_HANDLE_REQUEST",
    CONNECTION_ERROR_MSG = "CONNECTION_ERROR_MSG",
    DEFAULT_ERROR_MSG = "DEFAULT_ERROR_MSG"
}

/**
    * Request object for Login.executeRequest
    *
    * @export
    * @interface LoginRequest
    */
export interface LoginRequest {
        username: string;
        password: string;
        securityToken?: any;
}
/**
    * Response object for Login.executeRequest
    *
    * @export
    * @interface LoginResponse
    */
export interface LoginResponse {
        apiStatus: ApiStatus;
        isResponseTampered?: boolean;
        userId?: string;
        username?: string;
}
export class Login {
        /**
            * Executes Login based on the below mentioned params
            * and returns a promise holding the LoginResult
            * object
            * @static
            * @param {LoginRequest} request
            * @param {string} url
            * @returns
            * @memberof Login
            */
        static executeRequest(request: LoginRequest, url: string): Promise<unknown>;
}

export interface CreditCardValidationRequest {
    creditCardNo?: string;
    expiryDate?: any;
    dob?: any;
    atmPin?: any;
    identificationNumber: string;
    nationality: CountryCodeEnum;
}
export interface CreditCardValidationResult {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class CreditCardValidation {
    static executeRequest(request: CreditCardValidationRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateCreditCardDataInEnvelope(envelope: any, request: CreditCardValidationRequest): any;
    parseCreditCardValidateResponse(envelope: ApiResponseWrapper): CreditCardValidationResult;
}

export interface OTPCreateRequest {
}
export interface OTPCreateResult {
    otpToken?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OTPCreate {
    static executeRequest(request: OTPCreateRequest, url: string): Promise<OTPCreateResult>;
    createGDMEntity(): any;
    populateOTPCreateDataInEnvelope(envelope: any, request: OTPCreateRequest): any;
    parseOTPCreateResponse(envelope: ApiResponseWrapper): OTPCreateResult;
}

export interface OTPValidateRequest {
    otpToken?: any;
}
export interface OTPValidateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OTPValidate {
    static executeRequest(request: OTPValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOTPValidateDataInEnvelope(envelope: any, request: OTPValidateRequest): any;
    parseOTPValidateResponse(envelope: ApiResponseWrapper): OTPValidateResult;
}

export interface UserIDExistsInquiryRequest {
    userID?: any;
}
export interface UserIDExistsInquiryResult {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class UserIDExistsInquiry {
    static executeRequest(request: UserIDExistsInquiryRequest, url: string): Promise<UserIDExistsInquiryResult>;
    createGDMEntity(): any;
    populateUserIDExistsInquiryDataInEnvelope(envelope: any, request: UserIDExistsInquiryRequest): any;
    parseUserIDExistsInquiryResponse(envelope: ApiResponseWrapper): UserIDExistsInquiryResult;
}

export interface CreateUserRequest {
    name: string;
    password: string;
}
export interface CreateUserResult {
    loginId?: string;
    verificationId?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CreateUser {
    static executeRequest(request: CreateUserRequest, url: string): Promise<unknown>;
}

export interface SaveTransactionPasswordRequest {
    password: string;
}
export interface SaveTransactionPasswordResult {
    loginId?: string;
    verificationId?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class SaveTransactionPassword {
    static executeRequest(request: SaveTransactionPasswordRequest, url: string): Promise<unknown>;
}

export interface UserRegistrationRequest {
    userId: string;
}
export interface UserRegistrationResult {
    userStatus?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class UserRegistration {
    static executeRequest(request: UserRegistrationRequest, url: string): Promise<UserRegistrationResult>;
}

export interface CardNumberAndPinValidateRequest {
    username?: string;
    cardNumber?: CardNumber;
    cardPin?: string;
    cardType?: string;
}
export interface CardNumberAndPinValidateResult {
    cardNumberAndPinResponse?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CardNumberAndPinValidate {
    static executeRequest(request: CardNumberAndPinValidateRequest, url: string): Promise<unknown>;
}

export interface CardNumberValidateRequest {
    userName?: string;
    cardNumber: CardNumber;
    dateOfBirth: Date;
    cardPin: string;
    cardExpiryDate: Date;
    nationality: CountryCodeEnum;
    customerName?: string;
    identificationNumber: string;
}
export interface CardNumberValidateResult {
    cardNumberResponse?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CardNumberValidate {
    static executeRequest(request: CardNumberValidateRequest, url: string): Promise<unknown>;
}

export interface UpdatePasswordRequest {
    username?: string;
    password?: string;
}
export interface UpdatePasswordResult {
    updatePasswordStatus?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class UpdatePassword {
    static executeRequest(request: UpdatePasswordRequest, url: string): Promise<unknown>;
}

export interface ValidateCustIdenNationalIDRequest {
    accountNo?: string;
    ktpNo?: any;
    customerName?: string;
}
export interface ValidateCustIdenNationalIDResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class ValidateCustIdenNationalID {
    static executeRequest(request: ValidateCustIdenNationalIDRequest, url: string): Promise<ValidateCustIdenNationalIDResponse>;
    createGDMEntity(): any;
    populateSavingsAccountNumberDataInEnvelope(envelope: any, request: ValidateCustIdenNationalIDRequest): any;
    parseSavingsAccountNumberValidateResponse(envelope: ApiResponseWrapper): ValidateCustIdenNationalIDResponse;
}

export interface DebitCardNumberValidateRequest {
    username?: string;
    accountNumber?: AccountNumber;
    nationalIdentity?: string;
    nationality: string;
    customerName?: string;
    cardNumber?: CardNumber;
    cardType?: string;
    debitCardValidationPurpose?: DEBIT_CARD_VALIDATION_PURPOSE;
}
export interface DebitCardValidationResult {
    cardNumber?: CardNumber;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class DebitCardNumberValidate {
    static executeRequest(request: DebitCardNumberValidateRequest, url: string): Promise<void | DebitCardValidationResult>;
    createGDMEntity(): any;
    populateDebitCardDataInEnvelope(envelope: any, request: DebitCardNumberValidateRequest): any;
}

export interface ValidateCustIdenTmpPINRequest {
    accountNo?: string;
    atmPin?: string;
}
export interface ValidateCustIdenTmpPINResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class ValidateCustIdenTmpPIN {
    static executeRequest(request: ValidateCustIdenTmpPINRequest, url: string): Promise<ValidateCustIdenTmpPINResponse>;
    createGDMEntity(): any;
    populatePinNumberDataInEnvelope(envelope: any, request: ValidateCustIdenTmpPINRequest): any;
    parsePinNumberValidateResponse(envelope: ApiResponseWrapper): ValidateCustIdenTmpPINResponse;
}

export interface DeviceRegistrationInquiryRequest {
    deviceName: string;
    deviceModel: string;
    deviceOsIssuedIdentifier: string;
    deviceUUID: string;
    deviceMake: string;
    deviceID: string;
    deviceType: DEVICE_TYPE;
    userAgent: string;
}
export interface DeviceRegistrationInquiryResponse {
    deviceRegistrationStatus?: DEVICE_REGISTRATION_STATUS;
    userRegistrationStatus?: UserServiceRelationShipStatusType;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DeviceRegistrationInquiry {
    static executeRequest(request: DeviceRegistrationInquiryRequest, url: string): Promise<void | DeviceRegistrationInquiryResponse>;
}

export interface DeviceRegistrationRequest {
    deviceName: string;
    deviceModel: string;
    deviceOsIssuedIdentifier: string;
    deviceUUID: string;
    deviceMake: string;
    deviceID: string;
    deviceType: DEVICE_TYPE;
    userAgent: string;
}
export interface DeviceRegistrationResponse {
    deviceRegistrationStatus?: DEVICE_REGISTRATION_STATUS;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DeviceRegistration {
    static executeRequest(request: DeviceRegistrationRequest, url: string): Promise<void | DeviceRegistrationResponse>;
}

export interface UserPermissionInquiryRequest {
    userId: string;
}
export interface UserPermissionInquiryResponse {
    userGroup?: USER_GROUP;
    userType?: USER_TYPE;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class UserPermissionInquiry {
    static executeRequest(request: UserPermissionInquiryRequest, url: string): Promise<void | UserPermissionInquiryResponse>;
}

export interface LogOutRequest {
}
export interface LogOutResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class LogOut {
    static executeRequest(request: LogOutRequest, url: string): Promise<LogOutResponse>;
}

export interface UpdateMPINRequest {
    username?: string;
    newPassword?: string;
    oldPassword?: string;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    xAttributes?: any;
}
export interface UpdateMPINResponse {
    transactionCode?: string;
    date?: Date;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class UpdateMPIN {
    static executeRequest(request: UpdateMPINRequest, url: string): Promise<unknown>;
}

export interface AddCardOtpGetRequest {
    cardNumber: CardNumber;
    cardExpiryDate: Date;
    dateOfBirth: Date;
    cardPin: string;
    identificationNumber: string;
    customerNumber: string;
    email: string;
    mobileNumber: string;
    operation: OperationTypes;
}
export interface AddCardOtpGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AddCardOtpGet {
    static executeRequest(request: AddCardOtpGetRequest, url: string): Promise<unknown>;
}

export interface AddCardOtpConfirmRequest {
    cardNumber: CardNumber;
    cardExpiryDate: Date;
    dateOfBirth: Date;
    cardPin: string;
    identificationNumber: string;
    customerNumber: string;
    email: string;
    mobileNumber: string;
    otp: string;
    operation: OperationTypes;
}
export interface AddCardOtpConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AddCardOtpConfirm {
    static executeRequest(request: AddCardOtpConfirmRequest, url: string): Promise<unknown>;
}

export interface TransactionPasswordChangeConfirmRequest {
    userName?: string;
    oldTransactionPassword?: string;
    newTransactionPassword?: string;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    xAttributes?: any;
}
export interface TransactionPasswordChangeConfirmResponse {
    transactionCode?: string;
    date?: Date;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class TransactionPasswordChangeConfirm {
    static executeRequest(request: TransactionPasswordChangeConfirmRequest, url: string): Promise<unknown>;
}

export interface TransactionPasswordChangeValidateRequest {
    userName?: string;
    newTransactionPassword?: string;
    oldTransactionPassword?: string;
}
export class TransactionPasswordChangeValidate {
    static executeRequest(request: TransactionPasswordChangeValidateRequest, url: string): Promise<unknown>;
}

export interface TransactionPasswordChangeGetRequest {
    userName?: string;
    oldTransactionPassword?: string;
}
export interface TransactionPasswordChangeGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class TransactionPasswordChangeGet {
    static executeRequest(request: TransactionPasswordChangeGetRequest, url: string): Promise<unknown>;
}

export interface ChangeMpinGetRequest {
    userName?: string;
    oldMpin?: string;
}
export interface ChangeMpinGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class ChangeMpinGet {
    static executeRequest(request: ChangeMpinGetRequest, url: string): Promise<unknown>;
}

export interface ChangeMpinValidateRequest {
    userName?: string;
    newMpin?: string;
}
export interface ChangeMpinValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class ChangeMpinValidate {
    static executeRequest(request: ChangeMpinValidateRequest, url: string): Promise<unknown>;
}

export interface TwoFAGetRequest {
    transactionPayload?: any;
}
export interface TwoFAGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
    primaryVerificationData?: any;
    verificationType?: AuthVerificationType;
}
export class TwoFAGet {
    static executeRequest(request: TwoFAGetRequest, url: string): Promise<TwoFAGetResponse>;
}

export interface TwoFACreateRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
}
export interface TwoFACreateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
    primaryVerificationData?: any;
    challengeCode?: string;
}
export class TwoFACreate {
    static executeRequest(request: TwoFACreateRequest, url: string): Promise<TwoFACreateResponse>;
}

export interface TransactionPasswordForgotDebitCardValidateRequest {
    userId?: string;
    debitCardNumber?: string;
    cardPin?: string;
    cardExpiryDate?: Date;
    accountNumber?: string;
    customerIdentifier?: string;
}
export interface TransactionPasswordForgotDebitCardValidateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class TransactionPasswordForgotDebitCardValidate {
    static executeRequest(request: TransactionPasswordForgotDebitCardValidateRequest, url: string): Promise<unknown>;
}

export interface TransactionPasswordForgotCreditCardValidateRequest {
    userId?: string;
    creditCardNumber?: string;
    cardPin?: string;
    cardExpiryDate?: Date;
    dob?: string;
}
export interface TransactionPasswordForgotCreditCardValidateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class TransactionPasswordForgotCreditCardValidate {
    static executeRequest(request: TransactionPasswordForgotCreditCardValidateRequest, url: string): Promise<unknown>;
}

export interface TransactionPasswordForgotOtpConfirmRequest {
    userId?: string;
    otp: string;
}
export interface TransactionPasswordForgotOtpConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class TransactionPasswordForgotOtpConfirm {
    static executeRequest(request: TransactionPasswordForgotOtpConfirmRequest, url: string): Promise<unknown>;
}

export interface TransactionPasswordForgotOtpGetRequest {
    userId?: string;
}
export interface TransactionPasswordForgotOtpGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class TransactionPasswordForgotOtpGet {
    static executeRequest(request: TransactionPasswordForgotOtpGetRequest, url: string): Promise<TransactionPasswordForgotOtpGetResponse>;
}

export interface TransactionPasswordTwoFAGetRequest {
    userId?: string;
    transactionPassword?: string;
}
export interface TransactionPasswordTwoFAGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
    primaryVerificationData?: any;
    verificationType?: AuthVerificationType;
}
export class TransactionPasswordTwoFAGet {
    static executeRequest(request: TransactionPasswordTwoFAGetRequest, url: string): Promise<unknown>;
}

export interface AppInitRequest {
}
export interface AppInitResponse {
    sessionID?: string;
    apiStatus?: ApiStatus;
    isTamperingDetectionEnabled?: boolean;
    isResponseTampered?: boolean;
}
export class AppInit {
    static executeRequest(request: AppInitRequest, url: string): Promise<unknown>;
}

export interface CaptchaCreateRequest {
    sessionId?: string;
}
export interface CaptchaCreateResponse {
    captcha?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CaptchaCreate {
    static executeRequest(request: CaptchaCreateRequest, url: string): Promise<CaptchaCreateResponse>;
}

export interface CaptchaValidateRequest {
    userEnteredCaptcha?: string;
    sessionId?: string;
    username?: string;
}
export interface CaptchaValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    securityToken?: any;
}
export class CaptchaValidate {
    static executeRequest(request: CaptchaValidateRequest, url: string): Promise<CaptchaValidateResponse>;
}

export interface TransactionPasswordForgotUpdateRequest {
    userName?: string;
    twoFactorAuth?: string;
    oneTimePassword?: string;
    newPassword?: string;
    customerName?: string;
    phoneNumber?: string;
    email?: string;
}
export interface TransactionPasswordForgotUpdateResponse {
    transactionCode?: string;
    transactionDate?: Date;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class TransactionPasswordForgotUpdate {
    static executeRequest(request: TransactionPasswordForgotUpdateRequest, url: string): Promise<unknown>;
}

export interface SavingsAccountValidateRequest {
    accountNumber?: AccountNumber;
    debitCardPin?: string;
    debitCardNumber?: CardNumber;
    debitCardExpiryDate?: Date;
    dateOfBirth?: string;
}
export interface SavingsAccountValidateResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class SavingsAccountValidate {
    static executeRequest(request: SavingsAccountValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateSavingsAccountNumberDataInEnvelope(envelope: any, request: SavingsAccountValidateRequest): any;
    parseSavingsAccountNumberValidateResponse(envelope: ApiResponseWrapper): SavingsAccountValidateResponse;
}

export interface ChangeMpinTwoFAGetRequest {
    userName?: string;
    newMpin?: string;
}
export interface ChangeMpinTwoFAGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
    primaryVerificationData?: any;
    verificationType?: AuthVerificationType;
}
export class ChangeMpinTwoFAGet {
    static executeRequest(request: ChangeMpinTwoFAGetRequest, url: string): Promise<unknown>;
}

export interface OtpRegistrationSavingsCreateRequest {
    cardNumber?: CardNumber;
    accountNumber?: AccountNumber;
    dateOfBirth?: string;
}
export interface OtpRegistrationSavingsCreateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpRegistrationSavingsCreate {
    static executeRequest(request: OtpRegistrationSavingsCreateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpRegistrationSavingsCreateDataInEnvelope(envelope: any, request: OtpRegistrationSavingsCreateRequest): any;
    parseOtpRegistrationSavingsCreateResponse(envelope: ApiResponseWrapper): OtpRegistrationSavingsCreateResponse;
}

export interface OTPForgotMpinCreateRequest {
    userName?: string;
    accountNumber?: AccountNumber;
    identificationNumber?: string;
    customerName?: string;
    cardNumber?: CardNumber;
}
export interface OTPForgotMpinCreateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OTPForgotMpinSavingsCreate {
    static executeRequest(request: OTPForgotMpinCreateRequest, url: string): Promise<OTPForgotMpinCreateResult>;
    createGDMEntity(): any;
    populateOTPCreateDataInEnvelope(envelope: any, request: OTPForgotMpinCreateRequest): any;
    parseOTPCreateResponse(envelope: ApiResponseWrapper): OTPForgotMpinCreateResult;
}

export interface OtpRegistrationCreditCardCreateRequest {
    creditCardNo?: CardNumber;
    dateOfBirth?: string;
    identificationNumber?: string;
    expiryDate?: Date;
}
export interface OtpRegistrationCreditCardCreateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpRegistrationCreditCardCreate {
    static executeRequest(request: OtpRegistrationCreditCardCreateRequest, url: string): Promise<OtpRegistrationCreditCardCreateResponse>;
    createGDMEntity(): any;
    populateOtpRegistrationCreditCardCreateDataInEnvelope(envelope: any, request: OtpRegistrationCreditCardCreateRequest): any;
    parseOtpRegistrationCreditCardCreateResponse(envelope: ApiResponseWrapper): OtpRegistrationCreditCardCreateResponse;
}

export interface OtpOpenBlockedCreditCardCreateRequest {
    userName?: string;
    creditCardNo: CardNumber;
    dateOfBirth: String;
    expiryDate: Date;
    customerName?: string;
    identificationNumber: string;
}
export interface OtpOpenBlockedCreditCardCreateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpOpenBlockedCreditCardCreate {
    static executeRequest(request: OtpOpenBlockedCreditCardCreateRequest, url: string): Promise<OtpOpenBlockedCreditCardCreateResponse>;
    createGDMEntity(): any;
    populateOtpOpenBlockedCreditCardCreateDataInEnvelope(envelope: any, request: OtpOpenBlockedCreditCardCreateRequest): any;
    parseOtpOpenBlockedCreditCardCreateResponse(envelope: ApiResponseWrapper): OtpOpenBlockedCreditCardCreateResponse;
}

export interface OtpForgotMpinCreditCardCreateRequest {
    userName?: string;
    creditCardNo: CardNumber;
    dateOfBirth: String;
    expiryDate: Date;
    customerName?: string;
    identificationNumber: string;
}
export interface OtpForgotMpinCreditCardCreateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpForgotMpinCreditCardCreate {
    static executeRequest(request: OtpForgotMpinCreditCardCreateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpForgotMpinCreditCardCreateDataInEnvelope(envelope: any, request: OtpForgotMpinCreditCardCreateRequest): any;
    parseOtpForgotMpinCreditCardCreateResponse(envelope: ApiResponseWrapper): OtpForgotMpinCreditCardCreateResponse;
}

export interface OtpOpenBlockSavingsCreateRequest {
    userName?: string;
    accountNumber?: AccountNumber;
    identificationNumber?: string;
    customerName?: string;
    cardNumber?: CardNumber;
}
export interface OtpOpenBlockSavingsCreateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpOpenBlockSavingsCreate {
    static executeRequest(request: OtpOpenBlockSavingsCreateRequest, url: string): Promise<OtpOpenBlockSavingsCreateResult>;
    createGDMEntity(): any;
    populateOTPCreateDataInEnvelope(envelope: any, request: OtpOpenBlockSavingsCreateRequest): any;
    parseOTPCreateResponse(envelope: ApiResponseWrapper): OtpOpenBlockSavingsCreateResult;
}

export interface UserRegistrationCreditCardRequest {
    userId: string;
    cardNumberHashed?: CardNumber;
    expiryDate?: Date;
}
export interface UserRegistrationCreditCardResponse {
    registrationStatus?: CustomerServiceRelationshipStatusType;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class UserRegistrationCreditCard {
    static executeRequest(request: UserRegistrationCreditCardRequest, url: string): Promise<UserRegistrationCreditCardResponse>;
}

export interface OtpForgotMpinCreditCardValidateRequest {
    userName?: string;
    creditCardNo: CardNumber;
    dateOfBirth: String;
    expiryDate: Date;
    customerName?: string;
    identificationNumber: string;
    otp: string;
}
export interface OtpForgotMpinCreditCardValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpForgotMpinCreditCardValidate {
    static executeRequest(request: OtpForgotMpinCreditCardValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpForgotMpinCreditCardValidateDataInEnvelope(envelope: any, request: OtpForgotMpinCreditCardValidateRequest): any;
    parseOtpForgotMpinCreditCardValidateResponse(envelope: ApiResponseWrapper): OtpForgotMpinCreditCardValidateResponse;
}

export interface OtpOpenBlockedCreditCardValidateRequest {
    userName?: string;
    creditCardNo: CardNumber;
    dateOfBirth: String;
    expiryDate: Date;
    customerName?: string;
    identificationNumber: string;
    otp: string;
}
export interface OtpOpenBlockedCreditCardValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpOpenBlockedCreditCardValidate {
    static executeRequest(request: OtpOpenBlockedCreditCardValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpOpenBlockedCreditCardValidateDataInEnvelope(envelope: any, request: OtpOpenBlockedCreditCardValidateRequest): any;
    parseOtpOpenBlockedCreditCardValidateResponse(envelope: ApiResponseWrapper): OtpOpenBlockedCreditCardValidateResponse;
}

export interface OtpRegistrationCreditCardValidateRequest {
    creditCardNo?: CardNumber;
    dateOfBirth?: string;
    identificationNumber?: string;
    expiryDate?: Date;
    otp: string;
}
export interface OtpRegistrationCreditCardValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpRegistrationCreditCardValidate {
    static executeRequest(request: OtpRegistrationCreditCardValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpRegistrationCreditCardValidateDataInEnvelope(envelope: any, request: OtpRegistrationCreditCardValidateRequest): any;
    parseOtpRegistrationCreditCardValidateResponse(envelope: ApiResponseWrapper): OtpRegistrationCreditCardValidateResponse;
}

export interface OtpRegistrationSavingsValidateRequest {
    cardNumber?: CardNumber;
    accountNumber?: AccountNumber;
    dateOfBirth?: string;
    otp: string;
}
export interface OtpRegistrationSavingsValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpRegistrationSavingsValidate {
    static executeRequest(request: OtpRegistrationSavingsValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpRegistrationSavingsValidateDataInEnvelope(envelope: any, request: OtpRegistrationSavingsValidateRequest): any;
    parseOtpRegistrationSavingsValidateResponse(envelope: ApiResponseWrapper): OtpRegistrationSavingsValidateResponse;
}

export interface OtpForgotMpinValidateRequest {
    userName?: string;
    accountNumber?: AccountNumber;
    identificationNumber?: string;
    customerName?: string;
    cardNumber?: CardNumber;
    otp: string;
    nationality?: CountryCodeEnum;
}
export interface OtpForgotMpinValidateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpForgotMpinSavingsValidate {
    static executeRequest(request: OtpForgotMpinValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpValidateDataInEnvelope(envelope: any, request: OtpForgotMpinValidateRequest): any;
    parseOtpValidateResponse(envelope: ApiResponseWrapper): OtpForgotMpinValidateResult;
}

export interface OtpOpenBlockedSavingsValidateRequest {
    userName?: string;
    accountNumber?: AccountNumber;
    identificationNumber?: string;
    customerName?: string;
    cardNumber?: CardNumber;
    otp: string;
    nationality?: CountryCodeEnum;
}
export interface OtpOpenBlockedSavingsValidateResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class OtpOpenBlockedSavingsValidate {
    static executeRequest(request: OtpOpenBlockedSavingsValidateRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateOtpValidateDataInEnvelope(envelope: any, request: OtpOpenBlockedSavingsValidateRequest): any;
    parseOtpValidateResponse(envelope: ApiResponseWrapper): OtpOpenBlockedSavingsValidateResult;
}

export interface MSecureQrCodeCreateRequest {
}
export interface MSecureQrCodeCreateResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    imageData?: string;
    mimeType?: IMAGE_MIME_TYPE;
    encodingType?: EncodingType;
}
/**
  * MSecure Activation - Step 3
  * Get QR Code - Device ID
  */
export class MSecureQrCodeCreate {
    static executeRequest(request: MSecureQrCodeCreateRequest, url: string): Promise<MSecureQrCodeCreateResponse>;
}

export interface MSecureOtpCreateRequest {
    userName?: string;
    accountNumber?: AccountNumber;
    cardNumber?: string;
}
export interface MSecureOtpCreateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class MSecureOtpCreate {
    static executeRequest(request: MSecureOtpCreateRequest, url: string): Promise<MSecureOtpCreateResponse>;
}

export interface MSecureDeviceIdValidateRequest {
    deviceId?: string;
}
export interface MSecureDeviceIdValidateResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    imageData?: string;
    mimeType?: IMAGE_MIME_TYPE;
    encodingType?: EncodingType;
}
/**
  * MSecure Activation Step 3
  * Validate device ID
  */
export class MSecureDeviceIdValidate {
    static executeRequest(request: MSecureDeviceIdValidateRequest, url: string): Promise<MSecureDeviceIdValidateResponse>;
}

export interface MSecureQrCodeVerificationDataGetRequest {
}
export interface MSecureQrCodeVerificationDataGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
/**
  * MSecure Activation - Step 3
  * Get QR Code challenge verification data
  */
export class MSecureQrCodeVerificationDataGet {
    static executeRequest(request: MSecureQrCodeVerificationDataGetRequest, url: string): Promise<MSecureQrCodeVerificationDataGetResponse>;
}

export interface MSecureOtpValidateRequest {
    transactionPayload?: any;
    otp: string;
}
export interface MSecureOtpValidateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class MSecureOtpValidate {
    static executeRequest(request: MSecureOtpValidateRequest, url: string): Promise<unknown>;
}

export interface UserStatusUpdateRequest {
    userStatus: CustomerServiceRelationshipStatusType;
}
export interface UserStatusUpdateResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class UserStatusUpdate {
    static executeRequest(request: UserStatusUpdateRequest, url: string): Promise<UserStatusUpdateResponse>;
}

export interface MSecureChallengeCodeValidateRequest {
    challengeCode?: string;
}
export interface MSecureChallengeCodeValidateResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    transactionDate?: Date;
    mobileNumber?: string;
    transactionPayload?: any;
}
/**
  * MSecure Activation Step 5
  * Validate challenge code
  */
export class MSecureChallengeCodeValidate {
    static executeRequest(request: MSecureChallengeCodeValidateRequest, url: string): Promise<MSecureChallengeCodeValidateResponse>;
}

export interface TwoFATypeGetRequest {
}
export interface TwoFATypeGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    authVerificationType?: AuthVerificationType;
}
export class TwoFATypeGet {
    static executeRequest(request: TwoFATypeGetRequest, url: string): Promise<TwoFATypeGetResponse>;
}

export interface AddCreditCardRequest {
    password?: string;
    uiid?: string;
    cardNumber?: any;
    expiryDate?: any;
    dob?: any;
    nationalIDNumber?: any;
    creditCardPin?: any;
}
export interface AddCreditCardResult {
    addCreditCardDetails?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AddCreditCard {
    static executeRequest(request: AddCreditCardRequest, url: string): Promise<unknown>;
}

export interface CardTransactionUnbilledListRequest {
    cardIdentifier?: CardNumber;
}
export interface CardTransactionUnbilledListResult {
    unBilledTransactionData?: UnBilledTransaction[];
    transactionSummary?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export interface UnBilledTransaction {
    transactionDate: any;
    accountingDate: any;
    description: any;
    amount: any;
    cardNumber: any;
}
export class CardTransactionUnbilledList {
    static executeRequest(request: CardTransactionUnbilledListRequest, url: string): Promise<CardTransactionUnbilledListResult>;
    createGDMEntity(): any;
    populateCardTransactionUnbilledListInEnvelope(envelope: any, request: CardTransactionUnbilledListRequest): any;
    parseCardTransactionUnbilledListResponse(envelope: ApiResponseWrapper): CardTransactionUnbilledListResult;
}

export interface AccountListRequest {
    accountTypes?: AccountTypeEnum[];
}
export interface AccountListResponse {
    accountList?: Account[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AccountList {
    static executeRequest(request: AccountListRequest, url: string): Promise<AccountListResponse>;
}

export interface AccountDetailsSavingsRequest {
    accountNumber?: AccountNumber;
    accountType?: AccountTypeEnum;
}
export interface AccountDetailsSavingsResult {
    savingsAccountDetails?: SavingsListDetails;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AccountDetailsSavings {
    static executeRequest(request: AccountDetailsSavingsRequest, url: string): Promise<AccountDetailsSavingsResult>;
}

export interface AccountDetailsDepositRequest {
    accountNumber?: AccountNumber;
}
export interface AccountDetailsDepositResponse {
    depositAccountDetails?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AccountDetailsDeposit {
    static executeRequest(request: AccountDetailsDepositRequest, url: string): Promise<AccountDetailsDepositResponse>;
}

export interface AccountDetailsLoanRequest {
    accountNumber?: AccountNumber;
    loanType?: LoanTypesEnum;
}
export interface AccountDetailsLoanResponse {
    loanAccountDetails?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AccountDetailsLoan {
    static executeRequest(request: AccountDetailsLoanRequest, url: string): Promise<AccountDetailsLoanResponse>;
}

export interface TransactionSummaryListRequest {
    accountNumber?: AccountNumber;
    startDate?: any;
    endDate?: any;
}
export interface TransactionSummaryListResult {
    transactionSummaryList?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class TransactionSummaryList {
    static executeRequest(request: TransactionSummaryListRequest, url: string): Promise<TransactionSummaryListResult>;
}

export interface RecurringDepositAccountDetailsRequest {
    accountNumber?: AccountNumber;
}
export interface RecurringDepositAccountDetailsResult {
    recurringDepositAccountDetails?: RecurringDepositAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecurringDepositAccountDetails {
    static executeRequest(request: RecurringDepositAccountDetailsRequest, url: string): Promise<RecurringDepositAccountDetailsResult>;
}

export interface GetTransferAccountsRequest {
    accountType?: AccountTypeEnum;
}
export interface GetTransferAccountsResponse {
    transferAccounts?: Account[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class GetTransferAccounts {
    static executeRequest(request: GetTransferAccountsRequest, url: string): Promise<GetTransferAccountsResponse>;
}

/**
  * In Mutual fund account list request,
  * if category is there then investment account list API is called
  * else when no category, then the account summary API is called
  */
export interface MutualFundAccountsGetRequest {
    accountType?: string;
    isInvestmentAccount?: boolean;
}
export interface MutualFundAccountsGetResponse {
    mutualFundAccountList?: MutualFundAccount[];
    referanceDataList?: ReferenceData;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class MutualFundAccountsGet {
    static executeRequest(request: MutualFundAccountsGetRequest, url: string): Promise<MutualFundAccountsGetResponse>;
}

export interface PensionFundAccountsGetRequest {
}
export interface PensionFundAccountsGetResponse {
    pensionFundAccountList?: PensionFundAccount[];
    referanceDataList?: ReferenceData;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class PensionFundAccountsGet {
    static executeRequest(request: PensionFundAccountsGetRequest, url: string): Promise<PensionFundAccountsGetResponse>;
}

export interface PensionFundTransactionsGetRequest {
    accountNumber?: AccountNumber;
    startDate?: string;
    endDate?: string;
}
export interface PensionFundTransactionsGetResult {
    pensionTransactions?: PensionTransaction[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class PensionFundTransactionsGet {
    static executeRequest(request: PensionFundTransactionsGetRequest, url: string): Promise<PensionFundTransactionsGetResult>;
}

export interface SavingsCurrentAccountOpeningGetRequest {
    productId?: string;
    productName?: string;
    productType?: string;
    debitAccountNumber?: AccountNumber;
    purposeOfOpening?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialAmount?: string;
    currencyCode?: string;
}
export interface SavingsCurrentAccountOpeningGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    product?: string;
    productId?: string;
    debitAccountNumber?: AccountNumber;
    purposeOfOpening?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialAmount?: string;
    currencyCode?: string;
    transactionPayload?: any;
}
export class SavingsCurrentAccountOpeningGet {
    static executeRequest(request: SavingsCurrentAccountOpeningGetRequest, url: string): Promise<{
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        debitAccountNumber: AccountNumber;
        purposeOfOpening: string;
        sourceOfFunds: string;
        otherSourceOfFunds: string;
        initialAmount: string;
        product: string;
        productId: string;
        currencyCode: string;
        transactionPayload: any;
    } | {
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        debitAccountNumber?: undefined;
        purposeOfOpening?: undefined;
        sourceOfFunds?: undefined;
        otherSourceOfFunds?: undefined;
        initialAmount?: undefined;
        product?: undefined;
        productId?: undefined;
        currencyCode?: undefined;
        transactionPayload?: undefined;
    }>;
}

export interface SavingsCurrentProductsGetRequest {
}
export interface SavingsCurrentProductsGetResponse {
    productList?: ProductType[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class SavingsCurrentProductsGet {
    static executeRequest(request: SavingsCurrentProductsGetRequest, url: string): Promise<SavingsCurrentProductsGetResponse>;
}

export interface SBNRetailAccountsGetRequest {
    sbnRitelAccountType?: SBNRitelAccountType;
}
export interface SBNRetailAccountsGetResponse {
    SBNRetailAccountList?: SBNRetailAccount[];
    securityAccountDetails?: SBNRetailAccount[];
    referanceDataList?: ReferenceData;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class SBNRetailAccountsGet {
    static executeRequest(request: SBNRetailAccountsGetRequest, url: string): Promise<SBNRetailAccountsGetResponse>;
}

export interface SavingsCurrentAccountOpeningConfirmRequest {
    productType?: string;
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
}
export interface SavingsCurrentAccountOpeningConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    dateTime?: any;
    transactionPayload?: any;
}
export class SavingsCurrentAccountOpeningConfirm {
    static executeRequest(request: SavingsCurrentAccountOpeningConfirmRequest, url: string): Promise<unknown>;
}

export interface InvestmentAccountGetRequest {
    accountTypeFilter?: string;
    assetTypeFilter?: InvestmentAssetTypes;
}
export interface InvestmentAccountGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    accountDetails?: InvestmentAccountDetails[];
}
export class InvestmentAccountGet {
    static executeRequest(request: InvestmentAccountGetRequest, url: string): Promise<{
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        accountDetails: any;
    } | {
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        accountDetails?: undefined;
    }>;
}

export interface TermAccountOpeningGetRequest {
    productId?: string;
    debitAccount?: AccountNumber;
    currency?: string;
    duration?: number;
    typeOfDeposit?: string;
    extension?: ProductRenewalOption;
    purposeOfOpeningAccount?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialDeposit?: string;
}
export interface TermAccountOpeningGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    productId?: string;
    debitAccount?: AccountNumber;
    currency?: string;
    duration?: number;
    typeOfDeposit?: string;
    extension?: string;
    purposeOfOpeningAccount?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialDeposit?: string;
    interestRate?: string;
    productDetails?: any;
    transactionPayload?: any;
}
export class TermAccountOpeningGet {
    static executeRequest(request: TermAccountOpeningGetRequest, url: string): Promise<TermAccountOpeningGetResponse>;
}

export interface TermAccountOpeningConfirmRequest {
    productId?: string;
    debitAccount?: string;
    currency?: string;
    duration?: number;
    typeOfDeposit?: string;
    extension?: ProductRenewalOption;
    purposeOfOpeningAccount?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialDeposit?: string;
    password?: string;
    productDetails?: any;
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
}
export interface TermAccountOpeningConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    transactionTime?: any;
    transactionPayload?: any;
}
export class TermAccountOpeningConfirm {
    static executeRequest(request: TermAccountOpeningConfirmRequest, url: string): Promise<unknown>;
}

export interface RecurringProductsGetRequest {
}
export interface RecurringProductsGetResponse {
    productList?: ProductType[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecurringProductsGet {
    static executeRequest(request: RecurringProductsGetRequest, url: string): Promise<RecurringProductsGetResponse>;
}

export interface RecurringDepositOpeningGetRequest {
    productId?: string;
    debitAccount?: AccountNumber;
    currency?: string;
    duration?: number;
    monthlyDepositAmount?: string;
    monthlyDepositDate?: string;
    additionalPremium?: string;
    insuranceClaimPaymentOption?: string;
    purposeOfOpeningAccount?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialDeposit?: string;
}
export interface RecurringDepositOpeningGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    productId?: string;
    debitAccount?: AccountNumber;
    currency?: string;
    duration?: number;
    monthlyDepositAmount?: string;
    monthlyDepositDate?: string;
    additionalPremium?: string;
    insuranceClaimPaymentOption?: string;
    purposeOfOpeningAccount?: string;
    sourceOfFunds?: string;
    otherSourceOfFunds?: string;
    initialDeposit?: string;
    transactionPayload?: any;
}
export class RecurringDepositOpeningGet {
    static executeRequest(request: RecurringDepositOpeningGetRequest, url: string): Promise<RecurringDepositOpeningGetResponse>;
}

export interface RecurringDepositOpeningConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
}
export interface RecurringDepositOpeningConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    transactionTime?: any;
    transactionPayload?: any;
}
export class RecurringDepositOpeningConfirm {
    static executeRequest(request: RecurringDepositOpeningConfirmRequest, url: string): Promise<unknown>;
}

export interface RecurringDepositAccountListGetRequest {
    accountType?: AccountTypeEnum;
}
export interface RecurringDepositAccountListGetResult {
    RecurringDepositAccountList?: RecurringDepositAccount[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecurringDepositAccountListGet {
    static executeRequest(request: RecurringDepositAccountListGetRequest, url: string): Promise<RecurringDepositAccountListGetResult>;
}

export interface InvestmentProfileDetailsGetRequest {
}
export interface InvestmentProfileDetailsGetResponse {
    investmentProfileDetails?: InvestorProfileDetails;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class InvestmentProfileDetailsGet {
    static executeRequest(request: InvestmentProfileDetailsGetRequest, url: string): Promise<InvestmentProfileDetailsGetResponse>;
}

export interface DebitCardListInquiryRequest {
    accountNumber?: AccountNumber;
}
export interface DebitCardListInquiryResult {
    debitCardList?: DebitCardType[];
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DebitCardListInquiry {
    static executeRequest(request: DebitCardListInquiryRequest, url: string): Promise<void | DebitCardListInquiryResult>;
}

export interface DebitCardPinConfirmCreateRequest {
    accountNumber: AccountNumber;
    cardNumber: CardNumber;
    oldPin: string;
    newPin: string;
}
export interface DebitCardPinConfirmCreateResponse {
    accountNumber?: AccountNumber;
    cardNumber?: CardNumber;
    transactionCode?: any;
    date?: any;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class DebitCardPinConfirmCreate {
    static executeRequest(request: DebitCardPinConfirmCreateRequest, url: string): Promise<void | DebitCardPinConfirmCreateResponse>;
}

export interface DebitCardPinCreateRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
}
export interface DebitCardPinCreateResponse {
    transactionCode?: any;
    date?: any;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class DebitCardPinCreate {
    static executeRequest(request: DebitCardPinCreateRequest, url: string): Promise<void | DebitCardPinCreateResponse>;
}

export interface AccountListLoanRequest {
    loanType?: LoanTypesEnum;
}
export interface AccountListLoanResult {
    LoanAccountList?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AccountListLoan {
    static executeRequest(request: AccountListLoanRequest, url: string): Promise<AccountListLoanResult>;
}

export interface AccountAliasUpdateRequest {
    accountNumber?: AccountNumber;
    accountType?: AccountTypeEnum;
    alias?: string;
    assetName?: string;
    assetType?: InvestmentAssetTypes;
}
export interface AccountAliasUpdateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AccountAliasUpdate {
    static executeRequest(request: AccountAliasUpdateRequest, url: string): Promise<AccountAliasUpdateResponse>;
}

export interface AccountCustomerDetailsRequest {
    accountNumber?: AccountNumber;
    dateOfBirth?: Date;
    identificationNumber?: string;
}
export interface AccountCustomerDetailsResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    phoneNumber?: string;
}
export class AccountCustomerDetails {
    static executeRequest(request: AccountCustomerDetailsRequest, url: string): Promise<AccountCustomerDetailsResponse>;
    createGDMEntity(): any;
    populateCustomerDetailsInEnvelope(envelope: any, request: AccountCustomerDetailsRequest): any;
    parseCustomerDetailsResponse(envelope: ApiResponseWrapper): AccountCustomerDetailsResponse;
}

export interface SBNRetailProductsAndAccountsGetRequest {
    sid: string;
}
export interface SBNRetailProductsAndAccountsGetResponse {
    productAccountList?: SBNRetailAccount[];
    referenceData?: ReferenceData;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class SBNRetailProductsAndAccountsGet {
    static executeRequest(request: SBNRetailProductsAndAccountsGetRequest, url: string): Promise<void | SBNRetailProductsAndAccountsGetResponse>;
}

/**
  * In Mutual fund account list request,
  * if category is there then investment account list API is called
  * else when no category, then the account summary API is called
  */
export interface MfRedeemUnitGetRequest {
    accountNumber?: AccountNumber;
    productName?: string;
}
export interface MfRedeemUnitGetResponse {
    mutualFundAccountList?: MutualFundAccount[];
    referanceDataList?: ReferenceData;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class MfRedeemUnitGet {
    static executeRequest(request: MfRedeemUnitGetRequest, url: string): Promise<MfRedeemUnitGetResponse>;
}

export interface BlockDebitCardGetRequest {
    accountNumber?: AccountNumber;
    debitCardNumber?: CardNumber;
    reasonForBlock?: string;
}
export interface BlockDebitCardGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    accountNumber?: AccountNumber;
    debitCardNumber?: CardNumber;
    customerName?: string;
    cardName?: string;
    issueDate?: any;
    expirationDate?: any;
    reasonForBlock?: string;
    referenceDataList?: any;
    transactionPayload?: any;
}
export class BlockDebitCardGet {
    static executeRequest(request: BlockDebitCardGetRequest, url: string): Promise<BlockDebitCardGetResponse>;
}

export interface BlockDebitCardConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
}
export interface BlockDebitCardConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    cardBlockTimestamp?: any;
    transactionPayload?: any;
}
export class BlockDebitCardConfirm {
    static executeRequest(request: BlockDebitCardConfirmRequest, url: string): Promise<unknown>;
}

export interface DebitCardActivationConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
}
export interface DebitCardActivationConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    transactionDate?: Date;
    transactionPayload?: any;
}
export class DebitCardActivationConfirm {
    static executeRequest(request: DebitCardActivationConfirmRequest, url: string): Promise<unknown>;
}

export interface DebitCardActivationGetRequest {
    accountNumber?: AccountNumber;
    countryCode?: CountryCode;
    debitCardActivatedCountry?: string;
    returnDate?: Date;
    transactionPayload?: any;
}
export interface DebitCardActivationGetResponse {
    accountNumber?: AccountNumber;
    cardNumber?: CardNumber;
    countryCode?: CountryCode;
    nameOnCard?: string;
    returnDate?: Date;
    referenceId?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class DebitCardActivationGet {
    static executeRequest(request: DebitCardActivationGetRequest, url: string): Promise<DebitCardActivationGetResponse>;
}

export interface AddCardGetRequest {
    cardNumber?: string;
    cardExpiryDate?: Date;
    dateOfBirth?: string;
    cardPin?: string;
    name: string;
    identificationNumber: string;
}
export interface AddCardGetResult {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    addCardDetails?: AddCreditCardDetails;
}
export class AddCardGet {
    static executeRequest(request: AddCardGetRequest, url: string): Promise<unknown>;
    createGDMEntity(): any;
    populateCreditCardDataInEnvelope(envelope: any, request: AddCardGetRequest): any;
    parseAddCardDetailsValidationResponse(envelope: ApiResponseWrapper): AddCardGetResult;
}

export interface CreditCardDetailsRequest {
    cardNumberHashed?: any;
    endDate?: any;
}
export interface CreditCardDetailsResult {
    creditCardDetails?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CreditCardDetails {
    static executeRequest(request: CreditCardDetailsRequest, url: string): Promise<CreditCardDetailsResult>;
    createGDMEntity(): any;
    populatecreditCardDetailsDataInEnvelope(envelope: any, request: CreditCardDetailsRequest): any;
    parseCreditCardDetailsResponse(envelope: ApiResponseWrapper): CreditCardDetailsResult;
}

export interface CreditCardListRequest {
}
export interface CreditCardListResult {
    crediCardList?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CreditCardList {
    static executeRequest(request: CreditCardListRequest, url: string): Promise<CreditCardListResult>;
    createGDMEntity(): any;
    populatecreditCardListDataInEnvelope(envelope: any, request: CreditCardListRequest): any;
    parseCreditCardListResponse(envelope: ApiResponseWrapper): CreditCardListResult;
}

export interface AddCardConfirmRequest {
    cardNumber: CardNumber;
    cardExpiryDate: Date;
    dateOfBirth: string;
    cardPin: string;
    identificationNumber: string;
    customerNumber: string;
    email: string;
    mobileNumber: string;
    transactionPassword: string;
    challengeCode?: string;
    name?: string;
    creditLimit?: string;
}
export interface AddCardConfirmResponse {
    transactionDate?: Date;
    transactionCode?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class AddCardConfirm {
    static executeRequest(request: AddCardConfirmRequest, url: string): Promise<unknown>;
}

export interface AddCardUpdateConfirmRequest {
    cardNumber: CardNumber;
    cardExpiryDate: Date;
    dateOfBirth: string;
    cardPin: string;
    identificationNumber: string;
    customerNumber: string;
    email: string;
    mobileNumber: string;
    transactionPassword: string;
    challengeCode?: string;
    name?: string;
    creditLimit?: string;
}
export interface AddCardUpdateConfirmResponse {
    transactionDate?: Date;
    transactionCode?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
}
export class AddCardUpdateConfirm {
    static executeRequest(request: AddCardUpdateConfirmRequest, url: string): Promise<unknown>;
}

export interface CardAliasUpdateRequest {
    cardNumber?: string;
    cardType?: string;
    alias?: string;
}
export interface CardAliasUpdateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CardAliasUpdate {
    static executeRequest(request: CardAliasUpdateRequest, url: string): Promise<CardAliasUpdateResponse>;
}

export interface CreditCardTransactionsBilledDetailsRequest {
    cardIdentifier?: CardNumber;
    statementDate?: Date;
}
export interface CreditCardTransactionsBilledDetailsResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    cardIdentifier?: CardNumber;
    statementDate?: Date;
    transactionDetails?: TransactionDetails[];
}
export class CreditCardTransactionsBilledDetails {
    static executeRequest(request: CreditCardTransactionsBilledDetailsRequest, url: string): Promise<CreditCardTransactionsBilledDetailsResponse>;
    parseTransactionDetails: (transactionData: any) => any;
}

export interface CreditCardTransactionsBilledRequest {
    cardIdentifier?: CardNumber;
}
export interface CreditCardTransactionsBilledResponse {
    cardBilledData?: CardBilledData;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CreditCardTransactionsBilled {
    static executeRequest(request: CreditCardTransactionsBilledRequest, url: string): Promise<CreditCardTransactionsBilledResponse>;
    parseCreditCardListData: (cardData: any) => any;
}

export interface AddCardRegisteredGetRequest {
    cardNumber: CardNumber;
    cardExpiryDate: Date;
    dateOfBirth: string;
    cardPin: string;
    identificationNumber: string;
    customerNumber: string;
    email: string;
    mobileNumber: string;
    transactionPassword: string;
    otp?: string;
    name?: string;
    creditLimit?: string;
}
export interface AddCardRegisteredGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    payload?: any;
}
export class AddCardRegisteredGet {
    static executeRequest(request: AddCardRegisteredGetRequest, url: string): Promise<unknown>;
}

export interface AddCardNeverRegisteredGetRequest {
    cardNumber: CardNumber;
    cardExpiryDate: Date;
    dateOfBirth: string;
    cardPin: string;
    identificationNumber: string;
    customerNumber: string;
    email: string;
    mobileNumber: string;
    transactionPassword: string;
    otp?: string;
    name?: string;
    creditLimit?: string;
}
export interface AddCardNeverRegisteredGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    payload?: any;
}
export class AddCardNeverRegisteredGet {
    static executeRequest(request: AddCardNeverRegisteredGetRequest, url: string): Promise<AddCardNeverRegisteredGetResponse>;
}

export interface DebitCardStatusRequest {
    accountNumber?: AccountNumber;
    lastFourDigitsOfDebitCardNumber?: string;
    debitCardPin?: string;
}
export interface DebitCardStatusResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    debitCardstatus?: CardAccountRelationshipStatusType;
}
/**
  * MSecure Activation - Step 1
  * Validate debit card and PIN
  */
export class DebitCardStatus {
    static executeRequest(request: DebitCardStatusRequest, url: string): Promise<unknown>;
}

export interface CustomerDetailsRequest {
    category?: PayloadCategoryEnum;
}
export interface CustomerDetailsResult {
    customerDetails?: CustomerDetail;
    bussinessDate?: GDMDate;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CustomerDetails {
    static executeRequest(request: CustomerDetailsRequest, url: string): Promise<CustomerDetailsResult>;
}

export interface UserPreferenceRequest {
}
export interface UserPreferenceResult {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    languageCode?: string;
}
export class GetUserPreference {
    static executeRequest(request: UserPreferenceRequest, url: string): Promise<UserPreferenceResult>;
}

export interface UpdateUserPreferenceRequest {
    languageCode?: string;
}
export interface UpdateUserPreferenceResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    languageCode?: string;
}
export class UpdateUserPreference {
    static executeRequest(request: UpdateUserPreferenceRequest, url: string): Promise<UpdateUserPreferenceResponse>;
}

export interface CustomerLastLoginDateRequest {
}
export interface CustomerLastLoginDateResult {
    lastLoginDate?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class CustomerLastLoginDate {
    static executeRequest(request: CustomerLastLoginDateRequest, url: string): Promise<CustomerLastLoginDateResult>;
}

export interface UpdateCustomerPhotoRequest {
    imageBase64: string;
    imageName: string;
    purpose?: string;
    description?: string;
    mimeType: IMAGE_MIME_TYPE;
    sequence?: number;
    currentImageId: string;
}
export interface UpdateCustomerPhotoResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class UpdateCustomerPhoto {
    static executeRequest(request: UpdateCustomerPhotoRequest, url: string): Promise<UpdateCustomerPhotoResult>;
}

export interface UploadCustomerPhotoRequest {
    imageBase64: string;
    imageName: string;
    purpose?: any;
    description?: any;
    mimeType: IMAGE_MIME_TYPE;
}
export interface UploadCustomerPhotoResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class UploadCustomerPhoto {
    static executeRequest(request: UploadCustomerPhotoRequest, url: string): Promise<UploadCustomerPhotoResult>;
}

export interface ViewCustomerPhotoRequest {
}
export interface ViewCustomerPhotoResult {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    imageUploaded?: any;
    imageId?: string;
}
export class ViewCustomerPhoto {
    static executeRequest(request: ViewCustomerPhotoRequest, url: string): Promise<ViewCustomerPhotoResult>;
}

export interface LoginPasswordUpdateRequest {
    username?: string;
    twoFactorAuth?: string;
    newPassword?: string;
    oldPassword?: string;
}
export interface LoginPasswordUpdateResponse {
    transactionCode?: any;
    date?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class LoginPasswordUpdate {
    static executeRequest(request: LoginPasswordUpdateRequest, url: string): Promise<unknown>;
}

export interface BankListRequest {
    transferType?: FundTransferProcessingMethod;
    countryCode?: string;
}
export interface BankListResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    bankList?: BankDetail[];
}
export class BankList {
    static executeRequest(request: BankListRequest, url: string): Promise<void | BankListResponse>;
}

export interface GetBillerReachargeFeeRequest {
    planAmount?: string;
    customerReferenceNumber?: string;
    billerId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountTypeEnum;
    payeeId?: string;
    payeeNickName?: string;
}
export interface GetBillerReachargeFeeResponse {
    customerReferenceNumber?: string;
    billerId?: string;
    planAmount?: string;
    referenceNumber?: string;
    fee?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class GetBillerReachargeFee {
    static executeRequest(request: GetBillerReachargeFeeRequest, url: string): Promise<GetBillerReachargeFeeResponse>;
}

export interface ValidateBillPaymentRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface ValidateBillPaymentResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionTime?: Date;
    transactionPayload?: any;
    payeeId?: string;
    customerReferenceNumber?: string;
    billerId?: string;
    planAmount?: string;
    referenceNumber?: string;
    fee?: string;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    fromAccountNumber?: AccountNumber;
}
export class ValidateBillPayment {
    static executeRequest(request: ValidateBillPaymentRequest, url: string): Promise<unknown>;
}

export interface PreBillPaymentImmediateGetRequest {
    customerReferenceNumber?: string;
    billerId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountTypeEnum;
    payeeId?: string;
    payeeNickName?: string;
}
export interface PreBillPaymentImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    customerReferenceNumber?: string;
    planAmount?: string;
    referenceNumber?: string;
    customerName?: string;
    taxIdentificationNumber?: string;
    mobilePostPaidFlag?: string;
    mobilePostpaidkandateINum?: string;
    billStatusCode?: string;
    summaryAmountList?: Array<SummaryAmountList>;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    billerId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fee?: string;
    digitalTxnId?: string;
}
interface SummaryAmountList {
    amount?: string;
    description?: string;
}
export class PreBillPaymentImmediateGet {
    static executeRequest(request: PreBillPaymentImmediateGetRequest, url: string): Promise<PreBillPaymentImmediateGetResponse>;
}
export {};

export interface PreBillPaymentImmediateConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface PreBillPaymentImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionTime?: Date;
    transactionPayload?: any;
    payeeId?: string;
}
export class PreBillPaymentImmediateConfirm {
    static executeRequest(request: PreBillPaymentImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface RechargePaymentPredefinedBenficiaryImmediateGetRequest {
    customerReferenceNumber?: string;
    billerId?: string;
    billAmount?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    payeeId?: string;
    payeeNickName?: string;
}
export interface RechargePaymentPredefinedBenficiaryImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    referenceNumber?: string;
    billerId?: string;
    billAmount?: string;
    customerName?: string;
    tarif?: string;
    plnBillingId?: string;
    customerReferenceNumber?: string;
    fees?: any;
    currencyCode?: CurrencyCode;
    feeId?: string;
    currencySymbol?: string;
    finalPaymentAmount?: string;
    xAttributes?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class RechargePaymentPredefinedBenficiaryImmediateGet {
    static executeRequest(request: RechargePaymentPredefinedBenficiaryImmediateGetRequest, url: string): Promise<RechargePaymentPredefinedBenficiaryImmediateGetResponse>;
}

export interface RechargePaymentPredefinedBenficiaryImmediateWalletConfirmRequest {
    facilityProvider?: WalletTypes;
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface RechargePaymentPredefinedBenficiaryImmediateWalletConfirmResponse {
    validateWalletPaymentDetails: RechargePaymentPredefinedBenficiaryImmediateWallet;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class RechargePaymentPredefinedBenficiaryImmediateWalletConfirm {
    static executeRequest(request: RechargePaymentPredefinedBenficiaryImmediateWalletConfirmRequest, url: string): Promise<unknown>;
}

export interface RechargePaymentPredefinedBenficiaryImmediateWalletGetRequest {
    referenceNumber?: string;
    feeId?: string;
    mobileNumber?: string;
    amount?: string;
    walletType?: WalletTypes;
    serviceType?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    payeeId?: string;
    payeeNickName?: string;
}
export interface RechargePaymentPredefinedBenficiaryImmediateWalletGetResult {
    confirmWalletPaymentDetails?: RechargePaymentPredefinedBenficiaryImmediateWallet;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    digitalTxnId?: string;
}
export class RechargePaymentPredefinedBenficiaryImmediateWalletGet {
    static executeRequest(request: RechargePaymentPredefinedBenficiaryImmediateWalletGetRequest, url: string): Promise<RechargePaymentPredefinedBenficiaryImmediateWalletGetResult>;
}

export interface InsuranceHealthBillPaymentImmediateGetRequest {
    billerId?: string;
    billerName?: string;
    creditorAccountNumber?: string;
    noOfMonths?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    payeeId?: string;
    payeeNickName?: string;
}
export interface InsuranceHealthBillPaymentImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    referenceId?: string;
    billerId?: string;
    billerName?: string;
    creditorAccountNumber?: string;
    billNumber?: string;
    customerName?: string;
    customerReferenceNumber?: string;
    summaryAmountList?: any;
    totalAmount?: string;
    fees?: any;
    extendedAttributes?: any;
    creditorData?: any;
    paymentDescription?: string;
    currencyCode?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class InsuranceHealthBillPaymentImmediateGet {
    static executeRequest(request: InsuranceHealthBillPaymentImmediateGetRequest, url: string): Promise<InsuranceHealthBillPaymentImmediateGetResponse>;
}

export interface InsuranceBillPaymentImmediateGetRequest {
    billerId?: string;
    billerName?: string;
    billNumber?: string;
    noOfMonths?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    extendedAttributes?: any;
    fromAccountType?: AccountType;
    payeeId?: string;
    payeeNickName?: string;
}
export interface InsuranceBillPaymentImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    referenceId?: string;
    billerId?: string;
    organizationName?: any;
    billNumber?: string;
    openDate?: any;
    closeDate?: any;
    dueDate?: any;
    summaryAmountList?: any;
    totalAmount?: string;
    fees?: any;
    extendedAttributes?: any;
    creditorData?: any;
    paymentDescription?: string;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: Currency;
    fromAccountNumber?: AccountNumber;
    transactionPayload?: any;
    digitalTxnId?: string;
}
export class InsuranceBillPaymentImmediateGet {
    static executeRequest(request: InsuranceBillPaymentImmediateGetRequest, url: string): Promise<InsuranceBillPaymentImmediateGetResponse>;
}

export interface RechargePaymentPredefinedBenficiaryImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface RechargePaymentPredefinedBenficiaryImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionDate?: Date;
    transactionPayload?: any;
    stampDutyAmount?: string;
    valueAddedTax?: string;
    publicLightingTax?: string;
    meterNumber?: string;
    plnReferenceNumber?: string;
    rpTokenValue?: string;
    kwhValue?: string;
    ppnValue?: string;
    payeeId?: string;
    tarif?: string;
    tokenNumber?: string;
    customerReferenceNumber?: string;
    XAttributes?: string;
}
export class RechargePaymentPredefinedBenficiaryImmediateConfirm {
    static executeRequest(request: RechargePaymentPredefinedBenficiaryImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface InsuranceBillPaymentImmediateConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface InsuranceBillPaymentImmediateConfirmResponse {
    transactionNumber?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionDate?: Date;
    transactionPayload?: any;
    payeeId?: string;
}
export class InsuranceBillPaymentImmediateConfirm {
    static executeRequest(request: InsuranceBillPaymentImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface InsuranceHealthBillPaymentImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface InsuranceHealthBillPaymentImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    dateTime?: any;
    transactionPayload?: any;
    payeeId?: string;
}
export class InsuranceHealthBillPaymentImmediateConfirm {
    static executeRequest(request: InsuranceHealthBillPaymentImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface MfRedeemGetRequest {
    productCode?: string;
    bankAccountId?: AccountNumber;
    settlementAccountNumber?: AccountNumber;
    settlementAccountType?: AccountType;
    customerNumber?: string;
    transactionPayload?: any;
    redeemedUnits?: string;
    remainingUnits?: string;
    estimatedAmount?: string;
}
export interface MfRedeemGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    referenceDataListID?: string;
    investmentAccountNumber?: AccountNumber;
    settlementAccountNumber?: AccountNumber;
    investmentManager?: string;
    productName?: string;
    nav?: string;
    navDate?: string;
    minRedeemUnit?: string;
    maxRedeemUnit?: string;
    fees?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    customerNumber?: string;
    redeemedUnits?: string;
    productCode?: string;
    remainingUnits?: string;
    digitalTxnId?: string;
    estimatedAmount?: string;
    currencyCode?: string;
}
export class MfRedeemGet {
    static executeRequest(request: MfRedeemGetRequest, url: string): Promise<MfRedeemGetResponse>;
}

export interface MfTopupConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface MfTopupConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    creditorAccountNumber?: string;
    dateTime?: Date;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
}
export class MfTopupConfirm {
    static executeRequest(request: MfTopupConfirmRequest, url: string): Promise<unknown>;
}

export interface MfRedeemConfirmRequest {
    transactionPassword?: string;
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface MfRedeemConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    creditorAccountNumber?: string;
    dateTime?: Date;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
}
export class MfRedeemConfirm {
    static executeRequest(request: MfRedeemConfirmRequest, url: string): Promise<unknown>;
}

export interface ElectricityPostpaidBillPayImmConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface ElectricityPostpaidBillPayImmConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionDate?: Date;
    transactionPayload?: any;
    customerName?: string;
    payeeId?: string;
}
export class ElectricityPostpaidBillPayImmConfirm {
    static executeRequest(request: ElectricityPostpaidBillPayImmConfirmRequest, url: string): Promise<unknown>;
}

export interface ElectricityPostpaidBillPayImmGetRequest {
    customerReferenceNumber?: string;
    billerId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    payeeId?: string;
    payeeNickName?: string;
}
export interface ElectricityPostpaidBillPayImmGetResponse {
    referenceNumber?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    billerId?: string;
    customerReferenceNumber?: string;
    billAmount?: string;
    billInvoiceDates?: any;
    fees?: any;
    totalInvoiceSheet?: string;
    billInquiryId?: string;
    currencyCode?: string;
    finalPaymentAmountCurrency?: any;
    finalPaymentAmount?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class ElectricityPostpaidBillPayImmGet {
    static executeRequest(request: ElectricityPostpaidBillPayImmGetRequest, url: string): Promise<ElectricityPostpaidBillPayImmGetResponse>;
}

export interface RechargePaymentPredefinedBenficiaryImmediateDataPlanGetRequest {
    billerId?: string;
    planAmount?: string;
    customerReferenceNumber?: string;
    finalPaymentAmountCurrency?: any;
    finalPaymentAmount?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    planCode?: string;
    payeeId?: string;
    payeeNickName?: string;
    esbValue?: string;
}
export interface RechargePaymentPredefinedBenficiaryImmediateDataPlanGetResponse {
    fees?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    referenceData?: any;
    currency?: any;
    planDescription?: string;
    finalPaymentAmountCurrency?: any;
    finalPaymentAmount?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    billerId?: string;
    planAmount?: string;
    customerReferenceNumber?: string;
    planCode?: string;
    digitalTxnId?: string;
}
export class RechargePaymentPredefinedBenficiaryImmediateDataPlanGet {
    static executeRequest(request: RechargePaymentPredefinedBenficiaryImmediateDataPlanGetRequest, url: string): Promise<RechargePaymentPredefinedBenficiaryImmediateDataPlanGetResponse>;
}

export interface RechargePaymentPredefinedBenficiaryImmediateDataPlanConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface RechargePaymentPredefinedBenficiaryImmediateDataPlanConfirmResponse {
    transactionNumber?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionDate?: Date;
    transactionPayload?: any;
    payeeId?: string;
    referenceData?: any;
    currency?: any;
    planDescription?: string;
    finalPaymentAmountCurrency?: any;
    finalPaymentAmount?: string;
    fromAccountNumber?: AccountNumber;
    billerId?: string;
    planAmount?: string;
    customerReferenceNumber?: string;
    planCode?: string;
}
export class RechargePaymentPredefinedBenficiaryImmediateDataPlanConfirm {
    static executeRequest(request: RechargePaymentPredefinedBenficiaryImmediateDataPlanConfirmRequest, url: string): Promise<unknown>;
}

export interface CreditCardBillPaymentImmediateGetRequest {
    creditCardType?: string;
    creditCardNumber?: string;
    creditCardName?: string;
    nominalPayment?: string;
    nominalCurrency?: string;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountTypeEnum;
    transactionPayload?: any;
    payeeId?: string;
    payeeNickName?: string;
}
export interface CreditCardBillPaymentImmediateGetResponse {
    billAmount?: any;
    adminFee?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    finalPaymentAmountCurrency?: any;
    finalPaymentAmount?: string;
    creditCardType?: string;
    creditCardNumber?: string;
    nominalPayment?: string;
    fromAccountNumber?: AccountNumber;
    transactionPayload?: any;
    digitalTxnId?: string;
}
export class CreditCardBillPaymentImmediateGet {
    static executeRequest(request: CreditCardBillPaymentImmediateGetRequest, url: string): Promise<CreditCardBillPaymentImmediateGetResponse>;
}

export interface InvestmetBuyGetRequest {
    seriesId?: string;
    customerNumber?: string;
    couponLowerLimit?: string;
    couponRate?: string;
    couponUpperLimit?: string;
    initialCouponRate?: string;
    spread?: string;
    couponType?: string;
    settlementDate?: string;
    couponPayDate?: string;
    maturityDate?: string;
    inverstorQuota?: string;
    bookingAmount?: string;
    investmentAccount?: AccountNumber;
    fundingAccount?: AccountNumber;
    fundingAccountType?: AccountType;
    investorName?: string;
}
export interface InvestmetBuyGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    seriesId?: string;
    customerNumber?: string;
    bookingAmount?: string;
    investmentAccount?: AccountNumber;
    fundingAccount?: AccountNumber;
    currency?: any;
    couponLowerLimit?: string;
    couponRate?: string;
    couponUpperLimit?: string;
    initialCouponRate?: string;
    spread?: string;
    couponType?: string;
    settlementDate?: string;
    couponPayDate?: string;
    maturityDate?: string;
    inverstorQuota?: string;
    transactionPayload?: any;
    inverstorName?: string;
    paymentDueDate?: any;
    billingCode?: string;
    digitalTxnId?: string;
}
export class InvestmetBuyGet {
    static executeRequest(request: InvestmetBuyGetRequest, url: string): Promise<InvestmetBuyGetResponse>;
}

export interface InternetPackageBillPaymentImmediateGetRequest {
    billNumber?: string;
    billerId?: string;
    finalPaymentAmount?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    payeeId?: string;
    payeeNickName?: string;
}
export interface InternetPackageBillPaymentImmediateGetResponse {
    customerName?: string;
    planAmount?: string;
    adminFee?: any;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    currencySymbol?: string;
    currencyCode?: string;
    summaryAmountList?: any;
    extendedAttributes?: any;
    referenceData?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    billNumber?: string;
    billerId?: string;
    digitalTxnId?: string;
}
export class InternetPackageBillPaymentImmediateGet {
    static executeRequest(request: InternetPackageBillPaymentImmediateGetRequest, url: string): Promise<InternetPackageBillPaymentImmediateGetResponse>;
}

export interface InvestmentBuyConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface InvestmentBuyConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    paymentDueDate?: any;
    billingCode?: string;
    customerNumber?: string;
    inverstorName?: string;
    investmentAccount?: AccountNumber;
    fundingAccount?: AccountNumber;
    bookingAmount?: string;
    seriesId?: string;
    transactionPayload?: any;
}
export class InvestmentBuyConfirm {
    static executeRequest(request: InvestmentBuyConfirmRequest, url: string): Promise<unknown>;
}

export interface InvestmentRedeemGetRequest {
    customerNumber?: string;
    bookingCode?: string;
    product?: string;
    redeemAmount?: string;
    couponRate?: string;
    settlementDate?: string;
    maturityDate?: string;
    couponPayDate?: string;
    couponAmount?: string;
    nominalValue?: string;
    remainingOwnership?: string;
    fundingAccountNumber?: AccountNumber;
    investmentAccountNumber?: AccountNumber;
    transactionPayload?: any;
    referenceData?: any;
}
export interface InvestmentRedeemGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    seriesId?: string;
    bookingCode?: string;
    couponRate?: string;
    settlementDate?: string;
    couponPayDate?: string;
    maturityDate?: string;
    couponAmount?: string;
    customerNumber?: string;
    investmentAccount?: AccountNumber;
    fundingAccount?: AccountNumber;
    redeemAmount?: string;
    remainingOwnership?: string;
    currency?: any;
    refernceData?: any;
    transactionPayload?: any;
    digitalTxnId?: string;
}
export class InvestmentRedeemGet {
    static executeRequest(request: InvestmentRedeemGetRequest, url: string): Promise<InvestmentRedeemGetResponse>;
}

export interface InvestmentRedeemConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface InvestmentRedeemConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    redeemDate?: any;
    fundingAccount?: AccountNumber;
    seriesId?: string;
    couponRate?: string;
    settlementDate?: string;
    couponPayDate?: string;
    maturityDate?: string;
    couponAmount?: string;
    remainigOwnership?: string;
    customerNumber?: string;
    redeemAmount?: string;
    investmentAccount?: AccountNumber;
    transactionPayload?: any;
}
export class InvestmentRedeemConfirm {
    static executeRequest(request: InvestmentRedeemConfirmRequest, url: string): Promise<unknown>;
    getAssetProperties(properties: any): {
        couponRate: string;
        settlementDate: string;
        couponPayDate: string;
        maturityDate: string;
        couponAmount: string;
    };
}

export interface InvestmentPayGetRequest {
    billNumber?: string;
    billerName?: string;
    billerId?: string;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountTypeEnum;
    transactionPayload?: any;
}
export interface InvestmentPayGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    billerName?: string;
    billerId?: string;
    customerName?: string;
    billNumber?: string;
    billerCode?: string;
    xAttributes?: any;
    amount?: string;
    currency?: any;
    stateRevenueTransactionNumber?: string;
    adminFee?: string;
    referenceData?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    fromAccountNumber?: AccountNumber;
    transactionPayload?: any;
    digitalTxnId?: string;
}
export class InvestmentPayGet {
    static executeRequest(request: InvestmentPayGetRequest, url: string): Promise<InvestmentPayGetResponse>;
}

export interface InvestmentPayConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface InvestmentPayConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    xAttributes?: any;
    transactionCode?: string;
    transactionDate?: any;
    billNumber?: string;
    billerName?: string;
    billerCode?: string;
    amount?: string;
    currency?: any;
    bankAccId?: string;
    transactionPayload?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    payeeName?: string;
    stateRevenueTransactionNumber?: string;
}
export class InvestmentPayConfirm {
    static executeRequest(request: InvestmentPayConfirmRequest, url: string): Promise<unknown>;
}

export interface InternetPackageBillPaymentImmediateConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface InternetPackageBillPaymentImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionDate?: Date;
    transactionPayload?: any;
    payeeId?: string;
}
export class InternetPackageBillPaymentImmediateConfirm {
    static executeRequest(request: InternetPackageBillPaymentImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface TaxBillPaymentImmGetRequest {
    customerReferenceNumber?: string;
    billerName?: string;
    billerId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    payeeId?: string;
    payeeNickName?: string;
}
export interface TaxBillPaymentImmGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    customerName?: string;
    billerName?: string;
    customerReferenceNumber?: string;
    billerId?: string;
    xAttribute?: any;
    depositAmount?: string;
    amount?: string;
    currency?: any;
    stateRevenueTransactionNumber?: string;
    fee?: string;
    finalPaymentAmount?: string;
    billerCode?: string;
    finalPaymentAmountEntity?: any;
    stateRevenueIdentificationEntity?: any;
    service?: any;
    feeId?: string;
    summaryAmountList?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class TaxBillPaymentImmGet {
    static executeRequest(request: any, url: string): Promise<TaxBillPaymentImmGetResponse>;
}

export interface TaxBillPaymentImmConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface TaxBillPaymentImmConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionDate?: Date;
    transactionPayload?: any;
    payeeNickName?: string;
    stateRevenueTransactionNumber?: any;
    xAttribute?: any;
}
export class TaxBillPaymentImmConfirm {
    static executeRequest(request: any, url: string): Promise<unknown>;
}

export interface CreditCardPaymentImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface CreditCardPaymentImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transferId?: string;
    dateTime?: any;
    transactionPayload?: any;
    finalPaymentAmountCurrency?: any;
    finalPaymentAmount?: string;
    payeeId?: string;
}
export class CreditCardPaymentImmediateConfirm {
    static executeRequest(request: CreditCardPaymentImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface MfTopupGetRequest {
    productCode?: string;
    bankAccountId?: AccountNumber;
    settlementAccountNumber?: AccountNumber;
    settlementAccountType?: AccountType;
    customerNumber?: string;
    productName?: string;
    transactionPayload?: any;
    topupAmount?: any;
}
export interface MfTopupGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    referenceDataListID?: string;
    investmentAccountNumber?: AccountNumber;
    settlementAccountNumber?: AccountNumber;
    investmentManager?: string;
    productName?: string;
    nav?: string;
    navDate?: string;
    minTopup?: string;
    maxTopup?: string;
    fees?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    digitalTxnId?: string;
    currencyCode?: string;
}
export class MfTopupGet {
    static executeRequest(request: MfTopupGetRequest, url: string): Promise<MfTopupGetResponse>;
}

export interface WalletPaymentImmediateGetRequest {
    billerId?: string;
    virtualAccountNumber?: string;
    amount?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    payeeId?: string;
    payeeNickName?: string;
}
export interface WalletPaymentImmediateGetResponse {
    virtualAccountNumber?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    xAttributes?: any;
    billerName?: string;
    amount?: string;
    currency?: any;
    adminFee?: string;
    referenceData?: any;
    adminFeeCurrency?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    billerId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
    dynamicAttributes?: Array<{
        label: string;
        value: string;
    }>;
    billedAmountLimitLabel?: string;
    billedAmountLimitValue?: string;
    vaTotalPayment?: string;
}
export class WalletPaymentImmediateGet {
    static executeRequest(request: WalletPaymentImmediateGetRequest, url: string): Promise<WalletPaymentImmediateGetResponse>;
}

export interface WalletPaymentImmediateConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface WalletPaymentImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionCode?: string;
    transactionTime?: Date;
    transactionPayload?: any;
    payeeId?: string;
    virtualAccountNumber?: string;
    xAttributes?: any;
    billerName?: string;
    amount?: string;
    currency?: any;
    adminFee?: string;
    referenceData?: any;
    adminFeeCurrency?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    billerId?: string;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
    dynamicAttributes?: Array<{
        label: string;
        value: string;
    }>;
    billedAmountLimitLabel?: string;
    billedAmountLimitValue?: string;
    vaTotalPayment?: string;
}
export class WalletPaymentImmediateConfirm {
    static executeRequest(request: any, url: string): Promise<unknown>;
}

export interface TvSubscriptionGetRequest {
    billerId?: string;
    customerReferenceNumber?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
}
export interface TvSubscriptionGetResponse {
    billerId?: string;
    customerReferenceNumber?: string;
    customerName?: string;
    amount?: string;
    currency?: any;
    fees?: any;
    referenceId?: string;
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class TvSubscriptionGet {
    static executeRequest(request: TvSubscriptionGetRequest, url: string): Promise<TvSubscriptionGetResponse>;
}

export interface TicketPaymentImmediateGetRequest {
    billerId?: string;
    billId?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: any;
}
export interface TicketPaymentImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    billerId?: string;
    billId?: string;
    passengerName?: string;
    XAttributes?: {};
    billAmount?: string;
    fees?: any;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
}
export class TicketPaymentImmediateGet {
    static executeRequest(request: TicketPaymentImmediateGetRequest, url: string): Promise<TicketPaymentImmediateGetResponse>;
}

export interface TicketPaymentImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface TicketPaymentImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    dateTime?: any;
    transactionPayload?: any;
}
export class TicketPaymentImmediateConfirm {
    static executeRequest(request: TicketPaymentImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface TvSubscriptionConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface TvSubscriptionConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionDate?: any;
    transactionPayload?: any;
}
export class TvSubscriptionConfirm {
    static executeRequest(request: TvSubscriptionConfirmRequest, url: string): Promise<unknown>;
}

export interface RecentTransactionsAddRequest {
    transactionType?: WalletTypes | InsuranceTypes | TeleCommunicationTypes | ElectricityPaymentTypes | CreditCardTypes;
    data?: any;
}
export interface RecentTransactionsAddResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecentTransactionsAdd {
    static executeRequest(request: RecentTransactionsAddRequest, url: string): Promise<RecentTransactionsAddResponse>;
}

export interface RecentTransactionsPayeeGetRequest {
    billerName?: BillerName;
}
export interface RecentTransactionsPayeeGetResponse {
    recentTransactionsList?: FavouriteBillPayee[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecentTransactionsPayeeGet {
    static executeRequest(request: RecentTransactionsPayeeGetRequest, url: string): Promise<RecentTransactionsPayeeGetResponse>;
}

export interface RecentTransactionsTransferGetRequest {
    fundTransferMethod?: FundTransferProcessingMethod;
}
export interface RecentTransactionsTransferGetResponse {
    recentTransactions?: FavouriteTransfer[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecentTransactionsTransferGet {
    static executeRequest(request: RecentTransactionsTransferGetRequest, url: string): Promise<RecentTransactionsTransferGetResponse>;
}

export interface RecentTransactionsTransferAllGetRequest {
    fundTransferMethods: FundTransferProcessingMethod[];
}
export interface RecentTransactionsTransferAllGetResponse {
    recentTransactions?: FavouriteTransfer[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class RecentTransactionsTransferAllGet {
    static executeRequest(request: RecentTransactionsTransferAllGetRequest, url: string): Promise<RecentTransactionsTransferAllGetResponse>;
}

export interface OwnActTransferImmediateGetRequest {
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    currencyCode?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    transactionPayload?: any;
    toAccountBankCode?: string;
    toAccountBankName?: string;
    payeeId?: string;
    payeeNickName?: string;
    fromAccountName?: string;
}
export interface OwnActTransferImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    fees?: any;
    toAccountName?: string;
    finalTransferAmount?: any;
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    currencyCode?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    digitalTxnId?: string;
    destinationAccountType?: string;
    toAccountBankName?: string;
    toAccountBankCode?: string;
    fromAccountName?: string;
}
export class OwnActTransferImmediateGet {
    static executeRequest(request: OwnActTransferImmediateGetRequest, url: string): Promise<OwnActTransferImmediateGetResponse>;
}

export interface OwnActTransferImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface OwnActTransferImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    dateTime?: any;
    transactionPayload?: any;
    payeeId?: string;
    fees?: any;
    toAccountName?: string;
    finalTransferAmount?: any;
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    currencyCode?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountName?: string;
}
export class OwnActTransferImmediateConfirm {
    static executeRequest(request: OwnActTransferImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface PfTransferImmediateGetRequest {
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountTypeEnum;
    fromAccountHolderName?: string;
    currencyCode?: any;
    payeeId?: string;
    payeeNickName?: string;
}
export interface PfTransferImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    toAccountName?: string;
    assetCategory?: string;
    toAccountNumber?: string;
    transferAmount?: string;
    remarks?: string;
    fees?: any;
    finalTransferAmount?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountHolderName?: string;
    currencyCode?: any;
    digitalTxnId?: string;
}
export class PfTransferImmediateGet {
    static executeRequest(request: PfTransferImmediateGetRequest, url: string): Promise<PfTransferImmediateGetResponse>;
}

export interface PfTransferImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface PfTransferImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    dateTime?: any;
    transactionPayload?: any;
    payeeId?: string;
}
export class PfTransferImmediateConfirm {
    static executeRequest(request: PfTransferImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface InternationalTransferImmediateGetRequest {
    toAccountName?: string;
    toAccountAddress?: string;
    countryCode?: CountryCode;
    toAccountCurrency?: string;
    transferAmount?: string;
    toAccountBank?: any;
    toAccountID?: AccountNumber;
    purpose?: string;
    correspondentBankFee?: string;
    correspondentBankExpense?: any;
    fromAccountId?: AccountNumber;
    fromAccountCurrency?: any;
    fromAccountBankName?: string;
    selectedBankCorespondentExpense?: string;
    payeeId?: string;
    payeeNickName?: string;
}
export interface InternationalTransferImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    feeId?: any;
    refernceId?: any;
    adminFee?: string;
    totalAdminFee?: string;
    adminFeeCurrency?: any;
    totalAdminFeeCurrency?: any;
    toAccountName?: string;
    toAccountAddress?: string;
    countryCode?: CountryCode;
    toAccountBank?: any;
    toAccountID?: AccountNumber;
    purpose?: string;
    correspondentBankFee?: string;
    correspondentBankExpense?: any;
    transferAmount?: string;
    transferAmountCurrency?: any;
    correspondentBankFeeCurrency?: any;
    debitAmount?: string;
    debitCurency?: any;
    exchangeRate?: string;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    fromAccountId?: AccountNumber;
    fromAccountCurrency?: any;
    fromAccountData?: any;
    fromAccountBankName?: string;
    correspondentTotalBankFee?: string;
    correspondentTotalBankFeeCurrency?: any;
    finalPaymentAmountEntity?: any;
    transactionPayload?: any;
    digitalTxnId?: string;
}
export class InternationalTransferImmediateGet {
    static executeRequest(request: any, url: string): Promise<{
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        feeId: any;
        refernceId: any;
        adminFee: any;
        adminFeeCurrency: any;
        totalAdminFee: any;
        totalAdminFeeCurrency: any;
        toAccountAddress: any;
        toAccountName: any;
        countryCode: any;
        toAccountBank: any;
        toAccountID: any;
        transferAmount: any;
        transferAmountCurrency: any;
        purpose: any;
        correspondentBankExpense: any;
        correspondentBankFee: any;
        correspondentBankFeeCurrency: any;
        debitAmount: any;
        debitCurency: any;
        exchangeRate: any;
        finalPaymentAmountCurrency: any;
        finalPaymentAmount: any;
        fromAccountId: any;
        fromAccountCurrency: any;
        fromAccountData: any;
        fromAccountBankName: any;
        correspondentTotalBankFee: any;
        correspondentTotalBankFeeCurrency: any;
        finalPaymentAmountEntity: any;
        digitalTxnId: any;
        transactionPayload: any;
    } | {
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        feeId?: undefined;
        refernceId?: undefined;
        adminFee?: undefined;
        adminFeeCurrency?: undefined;
        totalAdminFee?: undefined;
        totalAdminFeeCurrency?: undefined;
        toAccountAddress?: undefined;
        toAccountName?: undefined;
        countryCode?: undefined;
        toAccountBank?: undefined;
        toAccountID?: undefined;
        transferAmount?: undefined;
        transferAmountCurrency?: undefined;
        purpose?: undefined;
        correspondentBankExpense?: undefined;
        correspondentBankFee?: undefined;
        correspondentBankFeeCurrency?: undefined;
        debitAmount?: undefined;
        debitCurency?: undefined;
        exchangeRate?: undefined;
        finalPaymentAmountCurrency?: undefined;
        finalPaymentAmount?: undefined;
        fromAccountId?: undefined;
        fromAccountCurrency?: undefined;
        fromAccountData?: undefined;
        fromAccountBankName?: undefined;
        correspondentTotalBankFee?: undefined;
        correspondentTotalBankFeeCurrency?: undefined;
        finalPaymentAmountEntity?: undefined;
        digitalTxnId?: undefined;
        transactionPayload?: undefined;
    }>;
}

export interface InternationalTransferImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface InternationalTransferImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    transactionDate?: any;
    transactionPayload?: any;
    payeeId?: string;
}
export class InternationalTransferImmediateConfirm {
    static executeRequest(request: InternationalTransferImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface FundTransferProcessingGetRequest {
    toAccountHolderName?: string;
    toAccountHolderType?: string;
    toAccountBankName?: string;
    toAccountBankCode?: string;
    toAccountHolderCitizenship?: string;
    toAccountHolderResidentialStatus?: string;
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    transactionProcessingMethod?: FundTransferProcessingMethod;
    currencyCode?: string;
    fromAccountBankName?: string;
    fromAccountHolderName?: string;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    payeeId?: string;
    payeeNickName?: string;
}
export interface FundTransferProcessingGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    toAccountHolderName?: string;
    toAccountHolderType?: string;
    toAccountBankName?: string;
    toAccountBankCode?: string;
    toAccountHolderCitizenship?: string;
    toAccountHolderResidentialStatus?: string;
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    fees?: any;
    fromAccountBankName?: string;
    fromAccountHolderName?: string;
    transactionProcessingMethod?: FundTransferProcessingMethod;
    currencyCode?: string;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
    transactionPayload?: any;
    fromAccountNumber?: AccountNumber;
    payeeId?: string;
    payeeNickName?: string;
    digitalTxnId?: string;
}
export class FundTransferProcessingGet {
    static executeRequest(request: FundTransferProcessingGetRequest, url: string): Promise<FundTransferProcessingGetResponse>;
}

export interface FundTransferProcessingConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    transactionProcessingMethod?: FundTransferProcessingMethod;
    digitalTxnId?: string;
}
export interface FundTransferProcessingConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    dateTime?: any;
    transactionPayload?: any;
    payeeId?: string;
    fees?: any;
    toAccountHolderName?: string;
    toAccountHolderType?: string;
    toAccountBankName?: string;
    toAccountBankCode?: string;
    toAccountHolderCitizenship?: string;
    toAccountHolderResidentialStatus?: string;
    toAccountNumber?: AccountNumber;
    transferAmount?: string;
    remarks?: string;
    transactionProcessingMethod?: FundTransferProcessingMethod;
    currencyCode?: string;
    fromAccountBankName?: string;
    fromAccountHolderName?: string;
    fromAccountNumber?: AccountNumber;
    fromAccountType?: AccountType;
    payeeNickName?: string;
    finalPaymentAmount?: string;
    finalPaymentAmountCurrency?: any;
}
export class FundTransferProcessingConfirm {
    static executeRequest(request: FundTransferProcessingConfirmRequest, url: string): Promise<unknown>;
}

export interface ExternalTransferImmediateGetRequest {
    fromAccountNumber?: AccountNumber;
    fromAccountBankName?: string;
    fromAccountName?: string;
    fromAccountType?: AccountType;
    currencyCode?: any;
    toAccountNumber?: AccountNumber;
    toAccountBankCode?: string;
    toAccountBankName?: string;
    transferAmount?: string;
    remarks?: string;
    transactionPayload?: any;
    payeeId?: string;
    payeeNickName?: string;
}
export interface ExternalTransferImmediateGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    fees?: any;
    referenceId?: string;
    toAccountBankCode?: string;
    toAccountBankName?: string;
    toAccountNumber?: AccountNumber;
    toAccountName?: string;
    transferAmount?: string;
    fromAccountNumber?: AccountNumber;
    remarks?: string;
    currencyCode?: any;
    finalTransferAmount?: any;
    transactionPayload?: any;
    fromAccountName?: string;
    digitalTxnId?: string;
}
export class ExternalTransferImmediateGet {
    static executeRequest(request: ExternalTransferImmediateGetRequest, url: string): Promise<ExternalTransferImmediateGetResponse>;
}

export interface ExternalTransferImmediateConfirmRequest {
    transactionPayload?: any;
    primaryVerificationData?: any;
    secretCode?: string;
    transactionPassword?: string;
    digitalTxnId?: string;
}
export interface ExternalTransferImmediateConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionNumber?: string;
    dateTime?: any;
    transactionPayload?: any;
    payeeId?: string;
    fees?: any;
    referenceId?: string;
    toAccountBankCode?: string;
    toAccountBankName?: string;
    toAccountNumber?: AccountNumber;
    toAccountName?: string;
    transferAmount?: string;
    fromAccountNumber?: AccountNumber;
    remarks?: string;
    currencyCode?: any;
    finalTransferAmount?: any;
    fromAccountName?: string;
}
export class ExternalTransferImmediateConfirm {
    static executeRequest(request: ExternalTransferImmediateConfirmRequest, url: string): Promise<unknown>;
}

export interface MutualFundAccountDetailsGetRequest {
    referanceDataList?: ReferenceData;
    objectID?: string;
}
export interface MutualFundAccountDetailsGetResponse {
    referenceDataList?: any;
    mutualFundAccountDetails?: MutualFundAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class MutualFundAccountDetailsGet {
    static executeRequest(request: MutualFundAccountDetailsGetRequest, url: string): Promise<MutualFundAccountDetailsGetResponse>;
}

export interface PensionFundAccountDetailsGetRequest {
    referanceDataList?: ReferenceData;
    objectID?: string;
}
export interface PensionFundAccountDetailsGetResponse {
    pensionFundAccountDetails?: PensionFundAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class PensionFundAccountDetailsGet {
    static executeRequest(request: PensionFundAccountDetailsGetRequest, url: string): Promise<PensionFundAccountDetailsGetResponse>;
}

export interface SbnRetailProductDetailsGetRequest {
    assetInquiryIdentifier?: string;
    seriesId?: string;
}
export interface SbnRetailProductDetailsGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    seriesId?: string;
    couponLowerLimit?: string;
    couponRate?: string;
    couponUpperLimit?: string;
    initialCouponRate?: string;
    spread?: string;
    couponType?: string;
    settlementDate?: string;
    couponPayDate?: string;
    maturityDate?: string;
    inverstorQuota?: string;
}
export class SbnRetailProductDetailsGet {
    static executeRequest(request: SbnRetailProductDetailsGetRequest, url: string): Promise<SbnRetailProductDetailsGetResponse>;
}

export interface SBNRetailAccountDetailsGetRequest {
    referanceDataList?: ReferenceData;
    objectID?: string;
}
export interface SBNRetailAccountDetailsGetResponse {
    SBNRetailAccountDetails?: SBNRetailAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class SBNRetailAccountDetailsGet {
    static executeRequest(request: SBNRetailAccountDetailsGetRequest, url: string): Promise<SBNRetailAccountDetailsGetResponse>;
}

export interface SbnRetailProductGetRequest {
}
export interface SbnRetailProductGetResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    products?: Asset[];
}
export class SbnRetailProductGet {
    static executeRequest(request: SbnRetailProductGetRequest, url: string): Promise<SbnRetailProductGetResponse>;
}

export interface AllSBNRetailAccountsGetRequest {
    referenceDataList?: ReferenceData;
    sbnRetailAccountList?: SBNRetailAccount[];
}
export interface AllSBNRetailAccountsGetResponse {
    SBNRetailAccountDetails?: SBNRetailAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AllSBNRetailAccountsGet {
    static executeRequest(request: AllSBNRetailAccountsGetRequest, url: string): Promise<AllSBNRetailAccountsGetResponse>;
}

export interface AllMutualFundAccountsGetRequest {
    referenceDataList?: ReferenceData;
    mutualFundAccountList?: MutualFundAccount[];
}
export interface AllMutualFundAccountsGetResponse {
    mutualFundAccountDetails?: MutualFundAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AllMutualFundAccountsGet {
    static executeRequest(request: AllMutualFundAccountsGetRequest, url: string): Promise<AllMutualFundAccountsGetResponse>;
}

export interface AllPensionFundAccountsGetRequest {
    referenceDataList?: ReferenceData;
    pensionFundAccountList?: PensionFundAccount[];
}
export interface AllPensionFundAccountsGetResponse {
    pensionFundAccountDetails?: PensionFundAccountDetail[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class AllPensionFundAccountsGet {
    static executeRequest(request: AllPensionFundAccountsGetRequest, url: string): Promise<AllPensionFundAccountsGetResponse>;
}

export interface FavouriteTransferAddRequest {
    payeeNickName?: string;
    payeeFullName?: string;
    payeeAddress?: any;
    bankName?: string;
    branchName?: string;
    branchIdentifier?: string;
    destinationCountry?: CountryCode;
    bankCode?: string;
    accountNumber?: AccountNumber;
    currency?: string;
    citizenShip?: string;
    residentialStatus?: string;
    beneficiaryType?: string;
    transactionProcessingMethod?: string;
}
export interface FavouriteTransferAddResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteTransferAdd {
    static executeRequest(request: FavouriteTransferAddRequest, url: string): Promise<FavouriteTransferAddResponse>;
}

export interface FavouriteTransferGetRequest {
    paymentMethod?: string;
}
export interface FavouriteTransferGetResponse {
    transferFavouriteList?: FavouriteTransfer[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteTransferGet {
    static executeRequest(request: FavouriteTransferGetRequest, url: string): Promise<FavouriteTransferGetResponse>;
}

export interface FavouriteTransferUpdateRequest {
    payeeNickName?: string;
    payeeID?: string;
    citizenShip?: string;
    payeeFullName?: string;
    payeeAddress?: Address;
    bankName?: string;
    branchName?: string;
    branchIdentifier?: string;
    accountNumber?: AccountNumber;
    bankCode?: string;
    beneficiaryType?: string;
    residentialStatus?: string;
    payeeCountryCode?: string;
    transactionProcessingMethod?: FundTransferProcessingMethod;
}
export interface FavouriteTransferUpdateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteTransferUpdate {
    static executeRequest(request: FavouriteTransferUpdateRequest, url: string): Promise<FavouriteTransferUpdateResponse>;
}

export interface FavouriteTransferDeleteRequest {
    payeeID?: string;
}
export interface FavouriteTransferDeleteResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteTransferDelete {
    static executeRequest(request: FavouriteTransferDeleteRequest, url: string): Promise<FavouriteTransferDeleteResponse>;
}

export interface FavouriteBillPayeeAddRequest {
    payeeNickName?: string;
    billerName?: string;
    customerReferenceNumber?: string;
    billerCode?: string;
    xAttributes?: any;
}
export interface FavouriteBillPayeeAddResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteBillPayeeAdd {
    static executeRequest(request: FavouriteBillPayeeAddRequest, url: string): Promise<FavouriteBillPayeeAddResponse>;
}

export interface FavouriteBillPayeeGetRequest {
    billerName?: string;
}
export interface FavouriteBillPayeeGetResponse {
    billPayeeFavouriteList?: FavouriteBillPayee[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteBillPayeeGet {
    static executeRequest(request: FavouriteBillPayeeGetRequest, url: string): Promise<FavouriteBillPayeeGetResponse>;
}

export interface FavouriteBillPayeeUpdateRequest {
    payeeNickName?: string;
    payeeID?: string;
    billerName?: string;
    customerReferenceNumber?: string;
}
export interface FavouriteBillPayeeUpdateResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteBillPayeeUpdate {
    static executeRequest(request: FavouriteBillPayeeUpdateRequest, url: string): Promise<FavouriteBillPayeeUpdateResponse>;
}

export interface FavouriteBillPayeeDeleteRequest {
    payeeID?: string;
}
export interface FavouriteBillPayeeDeleteResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteBillPayeeDelete {
    static executeRequest(request: FavouriteBillPayeeDeleteRequest, url: string): Promise<FavouriteBillPayeeDeleteResponse>;
}

export interface FavouriteAccountPayeeGetRequest {
    paymentMethods: string[];
}
export interface FavouriteAccountPayeeGetResponse {
    transferFavouriteList?: FavouriteTransfer[];
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
}
export class FavouriteAccountPayeeGet {
    static executeRequest(request: FavouriteAccountPayeeGetRequest, url: string): Promise<FavouriteAccountPayeeGetResponse>;
}

export interface ApiResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export abstract class ApiBaseModel<Request, Response extends ApiResponse> {
    protected abstract readonly moduleUrl: string;
    protected uiid: string;
    protected abstract createGDMEntity(request: Request, serviceClient?: any): MessageEnvelope;
    protected abstract parseResponse(isResponseTampered: boolean, apiStatus: ApiStatus, envelope: ApiResponseWrapper): Response;
    execute(request: Request, url: string): Promise<void | Response>;
    protected createMessageEnvelope(request: Request): any;
}

export interface CustomerServiceRelationshipInquiryRequest {
    assetType?: InvestmentAssetTypes;
    accountType?: AccountTypeEnum;
}
export interface CustomerServiceRelationshipInquiryResponse {
    registrationStatus?: CustomerServiceRelationshipStatusType;
    customerId?: string;
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class CustomerServiceRelationshipInquiry {
    static executeRequest(request: CustomerServiceRelationshipInquiryRequest, url: string): Promise<void | CustomerServiceRelationshipInquiryResponse>;
}

export interface CustomerServiceRelationshipRegistrationRequest {
    customerId: string;
    accountType?: AccountTypeEnum;
    assetType?: InvestmentAssetTypes;
}
export interface CustomerServiceRelationshipRegistrationResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    registrationStatus?: CustomerServiceRelationshipStatusType;
}
export class CustomerServiceRelationshipRegistration {
    static executeRequest(request: any, url: string): Promise<CustomerServiceRelationshipRegistrationResponse>;
}

export interface CountryListRequest {
}
export interface CountryListResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    countryList?: any;
}
export class CountryList {
    static executeRequest(request: CountryListRequest, url: string): Promise<CountryListResponse>;
}

export interface DownloadAcknowledgementRequest {
    data?: any;
    reportId?: DownloadReportIdsAcknowledgment;
    fileName?: string;
}
export interface DownloadAcknowledgementResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DownloadAcknowledgement {
    static executeRequest(request: any, url: string): Promise<DownloadAcknowledgementResponse>;
}

export interface DownloadAccountTransactionStatementRequest {
    accountNumber?: AccountNumber;
    startDate?: Date;
    endDate?: Date;
    reportId?: DownloadReportIdsAccountStatement;
    fileName?: string;
    accountType?: AccountTypeEnum;
    productName?: string;
    reportFormat?: ReportFormatTypes;
}
export interface DownloadAccountTransactionStatementResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DownloadAccountTransactionStatement {
    static executeRequest(request: any, url: string): Promise<DownloadAccountTransactionStatementResponse>;
}

export interface DownloadAccountInvestmentStatementRequest {
    accountNumber?: AccountNumber;
    startDate?: Date;
    endDate?: Date;
    reportId?: DownloadReportIdsAccountStatement;
    fileName?: string;
    accountType?: AccountTypeEnum;
    productName?: string;
    reportFormat?: ReportFormatTypes;
}
export interface DownloadAccountInvestmentStatementResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DownloadAccountInvestmentStatement {
    static executeRequest(request: any, url: string): Promise<DownloadAccountInvestmentStatementResponse>;
}

export interface DownloadCardTransactionStatementRequest {
    cardIdentifier?: CardNumber;
    reportId?: DownloadReportIdsAccountStatement;
    fileName?: string;
    reportFormat?: ReportFormatTypes;
}
export interface DownloadCardTransactionStatementResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DownloadCardTransactionStatement {
    static executeRequest(request: any, url: string): Promise<DownloadCardTransactionStatementResponse>;
}

export interface DownloadCardBilledTransactionStatementRequest {
    cardIdentifier?: CardNumber;
    reportId?: DownloadReportIdsAccountStatement;
    fileName?: string;
    reportFormat?: ReportFormatTypes;
    xattributes?: any;
    statementDate?: Date;
}
export interface DownloadCardBilledTransactionStatementResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
}
export class DownloadCardBilledTransactionStatement {
    static executeRequest(request: any, url: string): Promise<DownloadCardBilledTransactionStatementResponse>;
}

export interface PFMLifeGoalsGetRequest {
}
export interface PFMLifeGoalsGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    lifeGoals?: Array<LifeGoalAccount>;
}
export class PFMLifeGoalsGet {
    static executeRequest(request: PFMLifeGoalsGetRequest, url: string): Promise<void | PFMLifeGoalsGetResponse>;
}

export interface PFMRegistrationInquiryRequest {
}
export interface PFMRegistrationInquiryResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    registrationStatus?: CustomerServiceRelationshipStatusType;
}
export class PFMRegistrationInquiry {
    static executeRequest(request: PFMRegistrationInquiryRequest, url: string): Promise<void | PFMRegistrationInquiryResponse>;
}

export interface PFMRegistrationRequest {
}
export interface PFMRegistrationResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    registrationStatus?: CustomerServiceRelationshipStatusType;
}
export class PFMRegistration {
    static executeRequest(request: PFMRegistrationRequest, url: string): Promise<void | PFMRegistrationResponse>;
}

/**
  * @param year - Year
  * @param month - Month of the year. If month is not set, the API will fetch categories in the whole year
  */
export interface PFMCategoriesOfFundUsageGetRequest {
    year: number;
    month?: number;
}
export interface PFMCategoriesOfFundUsageGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    budgetCategories?: Array<BudgetCategory>;
}
export class PFMCategoriesOfFundUsageGet {
    static executeRequest(request: PFMCategoriesOfFundUsageGetRequest, url: string): Promise<void | PFMCategoriesOfFundUsageGetResponse>;
}

export interface PFMCategoryTransactionListGetRequest {
    categoryId: string;
    year: number;
    month?: number;
}
export interface PFMCategoryTransactionListGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    transactionSummaryList?: Array<TransactionSummary>;
}
export class PFMCategoryTransactionListGet {
    static executeRequest(request: PFMCategoryTransactionListGetRequest, url: string): Promise<void | PFMCategoryTransactionListGetResponse>;
}

export interface PFMLifeGoalAddRequest {
    lifeGoalName?: string;
    targetValue?: string;
    targetDate?: Date;
    typesOfSavings?: AccountTypeEnum;
    initialDeposit?: string;
    frequencyType?: frequencyTypeMethod;
}
export interface PFMLifeGoalAddResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    debitAmount?: string;
    currencyCode?: any;
    lifeGoalName?: string;
    targetValue?: string;
    targetDate?: Date;
    typesOfSavings?: AccountTypeEnum;
    initialDeposit?: string;
    frequencyType?: frequencyTypeMethod;
}
export class PFMLifeGoalAdd {
    static executeRequest(request: PFMLifeGoalAddRequest, url: string): Promise<void | PFMLifeGoalAddResponse>;
}

export interface PFMLifeGoalAddGetRequest {
    lifeGoalName?: string;
    targetValue?: string;
    targetDate?: Date;
    typesOfSavings?: AccountTypeEnum;
    initialDeposit?: string;
    debitAccount?: AccountNumber;
    debitAmount?: string;
    frequencyType?: frequencyTypeMethod;
    dayOfMonth?: DayOfMonthEnum;
}
export interface PFMLifeGoalAddGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    lifeGoalName?: string;
    targetValue?: string;
    targetDate?: Date;
    typesOfSavings?: AccountTypeEnum;
    initialDeposit?: string;
    debitAccount?: AccountNumber;
    debitAmount?: string;
    currencyCode?: any;
    frequencyType?: frequencyTypeMethod;
    digitalTxnId?: string;
    transactionPayload?: any;
    totalAmount?: string;
    dayOfMonth?: DayOfMonthEnum;
}
export class PFMLifeGoalAddGet {
    static executeRequest(request: PFMLifeGoalAddGetRequest, url: string): Promise<{
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        lifeGoalName: any;
        targetValue: any;
        targetDate: any;
        typesOfSavings: any;
        initialDeposit: any;
        debitAccount: AccountNumber;
        currencyCode: any;
        debitAmount: any;
        frequencyType: frequencyTypeMethod;
        digitalTxnId: any;
        transactionPayload: any;
        totalAmount: any;
        dayOfMonth: any;
    } | {
        apiStatus: ApiStatus;
        isResponseTampered: boolean;
        lifeGoalName?: undefined;
        targetValue?: undefined;
        targetDate?: undefined;
        typesOfSavings?: undefined;
        initialDeposit?: undefined;
        debitAccount?: undefined;
        currencyCode?: undefined;
        debitAmount?: undefined;
        frequencyType?: undefined;
        digitalTxnId?: undefined;
        transactionPayload?: undefined;
        totalAmount?: undefined;
        dayOfMonth?: undefined;
    }>;
}

export interface PFMLifeGoalAddConfirmRequest {
    transactionPassword?: string;
    transactionPayload: any;
    primaryVerificationData: any;
    secretCode?: string;
    digitalTxnId?: string;
}
export interface PFMLifeGoalAddConfirmResponse {
    apiStatus?: ApiStatus;
    isResponseTampered?: boolean;
    transactionPayload?: any;
    transactionDate?: Date;
    lifeGoalName?: string;
    targetValue?: string;
    typesOfSavings?: AccountTypeEnum;
    debitAccount?: AccountNumber;
    initialDeposit?: string;
    currencyCode?: any;
    totalAmount?: string;
    transactionCode?: string;
}
export class PFMLifeGoalAddConfirm {
    static executeRequest(request: PFMLifeGoalAddConfirmRequest, url: string): Promise<unknown>;
}

export interface PFMViewCashFlowRequest {
    accountNumber?: AccountNumber;
    startDate?: Date;
    endDate?: Date;
}
export interface PFMViewCashFlowResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    pfmAccountTransactions?: PfmAccountTransactions[];
}
export class PFMViewCashFlow {
    static executeRequest(request: PFMViewCashFlowRequest, url: string): Promise<PFMViewCashFlowResponse>;
}

export interface PFMFundUsageCategoryGetRequest {
    categoryId: string;
    year: number;
    month: number;
}
export interface PFMFundUsageCategoryGetResponse {
    apiStatus: ApiStatus;
    isResponseTampered?: boolean;
    budgetCategory?: BudgetCategory;
}
export class PFMFundUsageCategoryGet {
    static executeRequest(request: PFMFundUsageCategoryGetRequest, url: string): Promise<void | PFMFundUsageCategoryGetResponse>;
}

export const enum USER_GROUP {
    MASS = "MASS",
    EMERALD = "EMERALD",
    RETAIL_CUSTOMER = "RetailCustomer"
}
export const enum USER_TYPE {
    RETAIL_CUSTOMER = "RETAILCUSTOMER"
}

